/*
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move
to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

*/

class Solution {
public:

    int path(int x, int y, int m, int n, vector<vector<int>> &dp){
        if(x == m-1 && y == n-1){
            return 1;
        }
        if(x >= m || y >= n){
            return 0;
        }
        if(dp[x][y] != -1){
            return dp[x][y];
        }
        else
        return dp[x][y] = path(x+1, y, m, n, dp) + path(x, y+1, m, n, dp);
        
    }
    int uniquePaths(int m, int n) {
        // vector<int> dp(n,1);
        // int i,j;

        // for(i=1;i<m;i++)
        // {
        //     for(j=1;j<n;j++)
        //     {
        //         dp[j] += dp[j-1];
        //     }
        // }
        // return dp[n-1];

        vector<vector<int>> dp(m, vector<int>(n, -1));
        return path(0, 0, m, n, dp);
          

    }
};
