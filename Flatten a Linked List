Problem Statement






Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
4
3
1 2 3
3
8 10 15
2
18 22
1
29


Sample Output 1 :
1 2 3 8 10 15 18 22 29


Explanation For Sample Input 1:
The given linked list is 

Therefore after flattening the list will become-
1 -> 2 -> 3 -> 8 -> 10 -> 15 -> 18 -> 22 -> 29 ->null


Sample Input 2 :
5
2
4 6
2
5 71
3
7 8 9
3 
11 12 19
3
14 15 17


Sample Output 2 :
4 5 6 7 8 9 11 12 14 15 17 19 71


Expected Time Complexity:
Try solving this in O(n*n*k), where ‘n’ denotes the number of head nodes and ‘k’ is the average number of child nodes in all 'n' sub-lists.     


Expected Space Complexity:
Try solving this without using any extra space.   


Constraints:
1 <= n <= 100
1 <= k <= 20
1 <= Node.data <= 10^9

Time Limit: 1 sec



/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
#include <bits/stdc++.h>

using namespace std;

Node* flattenLinkedList(Node* head) 

{

    // Write your code here

    priority_queue<int , vector<int> , greater<int>> PQ;

    Node* temp = head;

    while(temp!=NULL)

    {

        PQ.push(temp->data);

        Node* temp2 = temp->child;

        while(temp2!=NULL)

        {

            PQ.push(temp2->data);

            temp2=temp2->child;

        }

        temp = temp->next;

    }

 

    Node* x = new Node(PQ.top());

    PQ.pop();

    Node* ans = x;

    while(PQ.size()!=0)

    {

        Node* a = new Node(PQ.top());

        PQ.pop();

        x->child = a;

        x = a;

    }

    return ans;



















	// Write your code here
	// queue<Node *> q;
	// Node * res = new Node(-1,NULL,NULL);
	// Node * tail = res;

	// q.push(head);
	// while(!q.empty() )
	// {
	// 	Node * curr = q.front();
	// 	q.pop();
	// 	if(curr->next != NULL)
	// 	q.push(curr->next);
	// 	Node * headNode = new Node(curr->data,NULL,NULL);
	// 	tail->next = headNode;
	// 	headNode->child = tail;
	// 	headNode->next = NULL;
	// 	tail = headNode;
	// 	curr = curr->child;
	// 	while(curr != NULL)
	// 	{
	// 		Node * newNode = new Node(curr->data,NULL,NULL);
	// 		tail->next = newNode;
	// 		newNode->child = tail;
	// 		tail = newNode;
	// 		curr = curr->child;
	// 	}
	// }
	// return res->next;



}


