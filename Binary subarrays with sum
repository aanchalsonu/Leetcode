Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length


class Solution {
public:

    // void solve(int i,vector<int> &arr,int goal, int &count, int n)
    // {
    //     if(i == arr.size())
    //     return;
    //     else 
    //     {
    //         solve(i+1,arr,goal,count,n);
    //         int sum=0;
    //         for(int j =i;j<arr.size();j++)
    //         {
    //             sum += arr[j];
    //         }
    //         if(sum == goal)
    //         count++;
    //         solve(i+1,arr,goal,count,n);
    //     }
    // }

    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int count=0;
        int n = nums.size();
        unordered_map<int,int> mp;
        mp[0] = 1;
        int pre_sum=0;
        for(auto i : nums)
        {
            pre_sum += i;
            int remove = pre_sum - goal;
            if(mp.count(remove) != 0)
            count  += mp[remove];
            mp[pre_sum]++;
        }
        return count;
    }
};
