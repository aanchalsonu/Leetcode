 /*
Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no 
two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. 
Print 1 if it is possible to colour vertices and 0 otherwise.

Example 1:

Input:
N = 4
M = 3
E = 5
Edges[] = {(0,1),(1,2),(2,3),(3,0),(0,2)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.
Example 2:

Input:
N = 3
M = 2
E = 3
Edges[] = {(0,1),(1,2),(0,2)}
Output: 0

*/

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
     bool isvalid(int node,int col,bool graph[101][101],vector<int> &color,int n)
    {
        for(int i=0;i<n;i++)
        {
            //if temp color != node and grapgh has adjacent elements and those elements are not assisgned color "col" 
            //which is assisgned to the particular node then return true else if an of this is false return false;
            if(i!=node&&graph[node][i]==1&&color[i]==col)
            return false;
        }
        
        return true;
    }
    bool f(int node,int n,int m,vector<int> &color,bool graph[101][101])
    {
       if(node==n)
       return true;
       
       for(int i=1;i<=m;i++)
       {
           if(isvalid(node,i,graph,color,n)) // to check if the assisgned color is not assisgned to any other adjacent node
           //in the graph.
           {
             color[node]=i;
             
           if(f(node+1,n,m,color,graph))
           return true;
           //backtrack 
           color[node]=0;
           
           }
       }
       
       return false; //not possible to color the path containing the node
    }
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        
        vector<int> color(n,0); //here i have initially not coloured the graph with any of the colors
        
       return f(0,n,m,color,graph);
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        Solution ob;
        cout << ob.graphColoring(graph, m, n) << endl;
    }
    return 0;
}

// } Driver Code Ends
