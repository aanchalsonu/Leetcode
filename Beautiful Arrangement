/*

Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered 
a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:

perm[i] is divisible by i.
i is divisible by perm[i].
Given an integer n, return the number of the beautiful arrangements that you can construct.

 

Example 1:

Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1
Example 2:

Input: n = 1
Output: 1

*/

class Solution {
public:
    int count=0;
    bool isDivisible(vector<int> &v)
    {
        int k=1;
        for(auto i : v)
        {
            if(i%k != 0 || k%i != 0)
            return false;
            k++;
        }
        return true;
        // for(int i=1;i<v.size();i++)
        // {
        //     if(v[i]%i != 0 || i%v[i] != 0)
        //     return false;
        // }
        return true;
    }


    int solve(vector<int> &v,int idx)
    {
        if(idx ==0 )
        {
            return 1;
        }
        int ans=0;
        for(int i=1;i<v.size();i++)
        {
            if(v[i]==0 && (idx%i==0 || i%idx==0))
            {
                v[i]=idx;
                ans+=solve(v,idx-1);
                v[i]=0;
            }
            
        }
        return ans;
    }

    int countArrangement(int n) {
        vector<int> v(n+1);
        return solve(v,n);
    }
};
