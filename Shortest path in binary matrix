Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1



class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& g) 
    {
        queue<pair<pair<int,int>,int>>temp;
        temp.push({{0,0},1});
        if(!g[0][0] && g.size()==1) return 1;
        if(g[0][0]) return -1;
        vector<vector<bool>>visit(g.size(),vector<bool>(g.size(),false));
        visit[0][0]=true;
        while(!temp.empty())
        {
            pair<int,int>pairs=temp.front().first;
            int x=pairs.first;
            int y=pairs.second;
            int length=temp.front().second;
            temp.pop();
vector<pair<int,int>>sides = {{0,1}, {0,-1},{1,0}, {-1,0},{1,1}, {-1,-1}, {1,-1}, {-1,1}};
    for(pair<int,int>pos:sides)
    {
        int nx=x+pos.first;
        int ny=y+pos.second;
        if(nx>=0 && ny>=0 && nx<g.size() && ny<g[0].size() && g[nx][ny]==0 && !visit[nx][ny])
        {
            temp.push({{nx,ny},length+1});
            visit[nx][ny]=true;

            if(nx==ny && ny==g.size()-1)
            return length+1;
        }
    }
    }
    return -1;
    }
};
