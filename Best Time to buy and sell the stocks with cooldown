/*

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share
of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0

*/

class Solution {
public:

    int solve(vector<int>& prices,int buy,int ind,vector<vector<int>>& dp)
    {

        //BASE CASES
        if(ind >= prices.size())
        return 0;

        if(dp[ind][buy] != -1)
        return dp[ind][buy];

        //BUY KARO AGAR BUY==0 HAI 
        if(buy == 0)
        {
            //2 CASES POSSIBLE HAI 1.BUYKARO 2.SKIPKARO AUR PHIR MAXIMUM FIND AKRO DONO MAI
            int buykaro = -prices[ind] + solve(prices,1,ind+1,dp);
            int skipkaro = solve(prices,0,ind+1,dp);
            int profit = max(buykaro,skipkaro);
            //MAXIMUM HOGA MERA ANSWER AUR STORE HOGA DP MAI
            dp[ind][buy] = profit;
        }
        else
        {
            //2 OPTIONS POSSIBLE HAI SELLKARO YA PHIR SKIPKARO , DONO KA MAXIMUM HOGA MERA ANSWER AUR AGAR MAI SELL KARTE HU THO USKA AGLA
            DINN PHIR KUCH NAHI KIYA JAA SAKTA HAI ISLIYE INDEX INCREMENT HOGA BY 2
            int sellkaro = prices[ind] + solve(prices,0,ind+2,dp);
            int skipkaro = solve(prices,1,ind+1,dp);
            int profit = max(sellkaro,skipkaro);
            //MAXIMUM STORE HOGA DP MAI
            dp[ind][buy] = profit;
        }

        return dp[ind][buy];
    }


    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+2,vector<int>(2,-1));

        return solve(prices,0,0,dp);
    }
};
