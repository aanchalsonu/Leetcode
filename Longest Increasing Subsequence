/*

Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

*/


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int i,j,ans=1;
        int n = nums.size();


        int dp[n];
        
        for(i=n-1;i>=0;i--)
        {
            int maxx=0;

            if(i == n-1)
            {
                dp[i]=1;
                ans = max(ans,dp[i]);
                continue;
            }
             
            for(j=i+1;j<n;j++)
            {
                if(nums[i] < nums[j])
                {
                    maxx= max(maxx,dp[j]);
                }
            }

            dp[i] = 1+maxx;
            ans = max(ans,dp[i]);
        }

        return ans;




        // for(i=0;i<n-1;i++)
        // {
        //     if(nums[i] < nums[i+1])
        //     ans++;
        // }
        // return ans;
    }
};
