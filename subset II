/*

Given an integer array nums that may contain duplicates, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]

*/

class Solution {
public:
    // vector<vector<int>> ans;
    // unordered_map<int,int> mp;
    // bool isValid(vector<int> temp)
    // {
    //     unordered_map<int,int> m;
    //     for(int i=0;i<temp.size();i++)
    //     {
    //         m[temp[i]]++;
    //     }
    //     for(int i=0,j=0;i<mp.size() && j<m.size();i++,j++)
    //     {
    //         if(m[temp[i]] >= mp[temp[i]])
    //         {
    //             return false;
    //         }
    //     }
    //     return true;
    // }

    // void solve(vector<int> output,int index,vector<int> nums)
    // {
    //     //Base case when index goes out of array size
    //     if(index >= nums.size())
    //     {
    //         ans.push_back(output);
    //         return;
    //     }

    //     //Exclude the number
    //     solve(output,index+1,nums);

    //     //Include the number
    //     if(isValid(nums[index]))
    //     output.push_back(nums[index]);
    //     solve(output,index+1,nums);

    // }

    void subsetHelper(int idx, vector<int>& nums, int n, vector<int> &temp, vector<vector<int>>& ans) {
        ans.push_back(temp);
        for (int i = idx; i < n; i++) {
            if (i != idx && nums[i] == nums[i-1])
                continue;
            temp.push_back(nums[i]);
            subsetHelper(i+1, nums, n, temp, ans);
            temp.pop_back();
        }
    }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        subsetHelper(0, nums, n, temp, ans);
        return ans;
    } 
};
