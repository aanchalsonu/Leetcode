/*

Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in
the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:


Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]


*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {

        
        if(head == NULL || head->next == NULL)
        {
            return head;
        }
        
        //phela temp is pointing to the second node
        //now second node should point back to the first node
       // head will point to the next iteration output that will be the temp node
        ListNode* temp = head->next;
        head->next = swapPairs(head->next->next);
        temp->next = head;

        return temp;




        // ListNode* curr = head;
        // ListNode* prev = 0;
        // ListNode* forw = NULL;
        // ListNode * connect=NULL;

        // while(curr != NULL)
        // {
        //     forw = curr->next;
        //     prev = prev->next;
        //     connect = forw->next;
        //     forw->next = curr;
        //     curr->next = connect;
        //     curr = connect;
        //     forw->next = prev;
        // }
    }
};
 
