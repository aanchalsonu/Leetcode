/*

Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k,
or false otherwise.

 

Example 1:


Input: root = [5,3,6,2,4,null,7], k = 9
Output: true
Example 2:


Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    // bool solve(TreeNode* root , unordered_map<int,int> mp, int t )
    // {
    //     if(root == NULL)
    //     return false;

    //     if(mp.find(t - root->val) != mp.end())
    //     return true;

    //     mp[root->val]++;

    //     return solve(root->left, mp,t) || solve(root->right,mp,t);
    // }

    // bool findTarget(TreeNode* root, int k) {
    //     unordered_map<int,int> mp;
    //     if(root == NULL)
    //     return false;

    //     return solve(root,mp,k);

    // }








    bool dfs(TreeNode* root, int target, unordered_map<int,int>& mp) {
        if(root == nullptr) return false;
        if(mp.find(target - root->val) != mp.end()) return true;
        
        mp[root->val] ++;

        return  dfs(root->left, target, mp) || dfs(root->right, target, mp);
    }
    
    bool findTarget(TreeNode* root, int k) {
        if(root == nullptr) return false;
        unordered_map<int,int> mp;
        return dfs(root, k, mp);   
    }
};
