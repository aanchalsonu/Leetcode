/*

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

*/
class Solution {
public:

    // bool isSafe(vector<vector<string>> res,int row, int col,int n)
    // {
    //     int i,j;

    //     //check for the columns
    //     for(i=0;i<col;i++)
    //     {
    //         if(res[row][i] == "Q")
    //         return false;
    //     }

    //     //check for the upper left daigonal
    //     for(i=row,j=col; i>=0 && j>=0 ;i--,j--)
    //     {
    //         if(res[i][j] == "Q")
    //         return false;
    //     }

    //     //check for the lower left diagonal
    //     for(i=row,j=col; i<n && j >=0 ; i++,j--)
    //     {
    //         if(res[i][j] == "Q")
    //         return false;
    //     }

    //     //else everything is fine so return true
    //     return true;
    // }

    // bool solve(int n,vector<vector<string>> &res,int col)
    // {
    //     //if you have reached the end then return true;

    //     if(col >= n)
    //     return true;

    //     //consider the column and try placing the queen in each column
    //     for(int i=0;i<n;i++)
    //     {
    //         //check if this current position is safe
    //         if(isSafe(res,i,col,n))
    //         res[i][col] = "Q";

    //         //check for the position to place  next column
    //         if(solve(n,res,col+1))
    //         return true;

    //         //if not possible then backtrack
    //         res[i][col] = ".";
    //     }
    //     return false;
    // }

    // vector<vector<string>> solveNQueens(int n) {
    //     vector<vector<string>> res(n,vector<string>(n));
    //     for(int i=0;i<n;i++)
    //     {
    //         for(int j=0;j<n;j++)
    //         {
    //             res[i][j] = ".";
    //         }
    //     }
    //     if(solve(n,res,0))
    //     return res;
    //     return res;
    // }


    bool valid(int row,int col,vector<string> arr)
    {
        int n = arr.size();
        for(int i=0;i<n;i++){
            if(arr[row][i]!='.'){
                return false;
            }
        }
        for(int i=0;i<n;i++){
            if(arr[i][col]!='.'){
                return false;
            }
        }

        int i=row;
        int j=col;

        //to check for daigonal
        while(i>=0 && j>=0)
        {
            if(arr[i][j]!='.'){
                return false;
            }
            i--;
            j--;
        }
        //lower daigonal
        i=row;
        j=col;
        while(i>=0 && j<n)
        {
            if(arr[i][j]!='.'){
                return false;
            }
            i--;
            j++;
        }

        //if everything is good then return true
        return true;
    }


    void dfs(int index,int count,int n,vector<string> arr,vector<vector<string>> &ans)
    {
        if(count==n)
        {
            ans.push_back(arr);
            return;
        }
        if(index>=n)
        {
            return;
        }

        for(int i=0;i<n;i++){
            if(valid(index,i,arr))
            {
                arr[index][i] = 'Q';
                dfs(index+1,count+1,n,arr,ans);
                arr[index][i] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<string> arr;
        string curr;
        vector<vector<string>> ans;
        for(int i=0;i<n;i++){
            curr+='.';
        }
        for(int i=0;i<n;i++){
            arr.push_back(curr);
        }
        
        //here we maintain a vector of string for each row of our 2D ar array answer.
        //since it is a string we use two arrays
        //index,count, n ,array, ans
        dfs(0,0,n,arr,ans);

        return ans;
    }








};
