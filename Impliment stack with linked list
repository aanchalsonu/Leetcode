Problem Statement


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
3 5
3 4
1
2
Sample Output 1:
2
false    
Explanation For Sample Output 1:
The first two queries ('3') push 5 and 4 on the stack. So the size of the stack becomes 2. 

Therefore the third query ('1') prints the size, and since the stack is not empty, the fourth and final query ('2') outputs "false"
Sample Input 2:
4
3 5
3 4
4
5
Sample Output 2:
5   
Explanation For Sample Output 2:
The first two queries ('3') push 5 and 4 on the stack.

The third query ('4') removes the top element of the stack, which is 4.

The fourth and final query ('5') prints the top element of the stack, 5
Constraints:
1 <= q <= 10^6
1 <= type <= 5
1 <= Data <= 2^31 - 1

Where 'type' is the type of query and 'Data' is the values getting pushed and popped from the stack. 

Time Limit: 1sec


/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };


*****************************************************************/

class Stack
{
    //Write your code here
    Node * root;
    int size;
public:
    
    Stack() {
      // Write your code here
      root = nullptr;
      size=0;
    }

    int getSize()
    {
        return size;
        //Write your code here
        // int cnt=0;
        // Node * temp = root;
        // while(temp->next != NULL)
        // {
        //     cnt++;
        //     temp = temp->next;
        // }
        // return cnt;
    }

    bool isEmpty()
    {
        //Write your code here
        if(size == 0)
        return true;
        else
        return false;
    }

    void push(int data)
    {
        //Write your code here
        // if(root == NULL)
        // {
        //     Node * newNode = new Node(data);
        //     root = newNode;
        // }
        // else
        // {
            Node * newNode  = new Node(data);
            newNode->next = root;
            root = newNode;
            size++;
        // }
    }

    void pop()
    {
        //Write your code here
        if(isEmpty())
        return;
        Node * temp = root;
        root = root->next;
        size--;
        delete  temp;
    }

    int getTop()
    {
        //Write your code here
        if(isEmpty())
        return -1;
        else
        return root->data;
    }
};
