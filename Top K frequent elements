/*

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.

*/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {

        priority_queue<pair<int,int>> pq;
        unordered_map<int,int> m;
        vector<int> res;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
        }
        for(auto i : m)
        {
            pq.push({i.second, i.first});
        }

        while(k>0)
        {
            res.push_back(pq.top().second);
            pq.pop();
            k= k-1;
        }
        return res;



    //USING MAP AND VECTOR ABOVE ONE IS USING PRIOROTY QUEUE

        // vector<int> ans;
        // unordered_map<int,int> mp;
        // int i,n;
        // n = nums.size();
        // for(i=0;i<n;i++)
        // {
        //     mp[nums[i]]++;
        // }
        // vector<pair<int,int>> v;
        // for(auto itr : mp)
        // {
        //     v.push_back({itr.second,itr.first});
        // }
        // sort(v.rbegin(),v.rend());
        // for(i=0;i<k;i++)
        // {
        //     ans.push_back(v[i].second);
        // }
        // return ans;

    }
};
