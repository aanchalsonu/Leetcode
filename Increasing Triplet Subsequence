/*

Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. 
If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.

*/


class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {


        int i,secondSmall=9999999999,firstSmall;
        firstSmall=nums[0];
        for (i=1;i<nums.size();i++)
        {
            if(nums[i]<firstSmall)
            {
               // if(nums.size()-2>i){
                firstSmall=nums[i];
               // secondSmall=9999999999;}
            }
            else if(nums[i]<secondSmall && firstSmall!=nums[i])
            {
                secondSmall=nums[i];
            }
            else{
                if(firstSmall<secondSmall && secondSmall<nums[i])
                return true;
            }
        }
        return false;














        // int i,j,k,n;
        // n = nums.size();
        // int fs = nums[0];
        // int ss = 99999;

        // for(i=1;i<n;i++)
        // {
        //     if(nums[i] < fs)
        //     {
        //         fs = nums[i];
        //     }
        //     else if(nums[i] < ss && fs != nums[i])
        //     {
        //         ss = nums[i];
        //     }
        //     else
        //     {
        //         if(fs < ss && ss < nums[i])
        //         return true;
        //     }
        // }
        // return false;











        // for(i=0;i<n;i++)
        // {
        //     j= i+1;
        //     k = n-1;
        //     while(k>j)
        //     {
        //         if(i<j && j<k)
        //         {
        //             if(nums[i]<nums[j] && nums[j] < nums[k])
        //             return true;
        //         }
        //         // j++;
        //         k--;
        //     }
        //     j=i+1;
        //     k= n-1;
        //     while(j<k)
        //     {
        //         if(i<j && j<k)
        //         {
        //             if(nums[i]<nums[j] && nums[j] < nums[k])
        //             return true;
        //         }
        //         j++;
        //         // k--;
        //     }
        //     j=i+1;
        //     k= n-1;
        //     while(j<k && k>j)
        //     {
        //         if(i<j && j<k)
        //         {
        //             if(nums[i]<nums[j] && nums[j] < nums[k])
        //             return true;
        //         }
        //         j++;
        //         k--;
        //     }
        // }
        // return false;
    }
};
