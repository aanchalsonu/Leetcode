/*

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to 
a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].

*/

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {

//THIRD APPROACH

        //Using Binary Search Logic
        int i=0, n = numbers.size();
        int j=n-1;

        while(i<=j)
        {
            if(numbers[i]+numbers[j] == target)
            {
                return {i+1,j+1};
            }
            else if(numbers[i]+numbers[j] < target)
            i++;
            else if(numbers[i]+numbers[j] > target)
            j--;
        }
        return {-1,-1};


//SECOND APPROACH 

        // int i,j,n = numbers.size(),f=0;
        // vector<int> res,temp;

        // //first transfer all the contents to the vector temp so that you cam apply find function 
        // for(i=0;i<n;i++)
        // temp.push_back(numbers[i]);

        // //Now apply find function which takes 3 arguments , begin ,end and target and returns an iterator to the found element or the pointer pointing to the last position 

        // for(i=0;i<n;i++)
        // {
        //     auto itr = temp.find(temp.begin(), temp.end(),(target - numbers[i]));
        //     if(itr != temp.end())
        //     {
        //         res.push_back(i+1);
        //         res.push_back(itr - temp.begin() + 1);
        //         break;
        //     }
        // }


    //FIRST APPROACH

        // for(i=0;i<n && f==0;i++)
        // {
        //     f=0;
        //     for(j=0;j<n;j++)
        //     {
        //         if(numbers[i] + numbers[j] == target && i != j)
        //         {
        //             res.push_back(i+1);
        //             res.push_back(j+1);
        //             f=1;
        //         }
        //     }
        // }
        // return res;

    }
};
