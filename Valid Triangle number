/*

Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.

 

Example 1:

Input: nums = [2,2,3,4]
Output: 3
Explanation: Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Example 2:

Input: nums = [4,2,3,4]
Output: 4
 

Constraints:

1 <= nums.length <= 10

*/


class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int n = nums.size();
        int cnt=0;
        sort(nums.begin(),nums.end());
        for( int k=n-1;k>=2;k--)
        {
            int left = 0;
            int right = k-1;
            while(left<right)
            {
                if(nums[left]+nums[right] <= nums[k])
                left++;
                else
                {
                    cnt += (right-left);
                    right--;
                }
            }
        }
        return cnt;
    }
};



/*

THE LOGIC IS  A+B <= C
SO A POINTER K IS POINTING TO N-1 (CONSIDERED AS C)
LEFT AND RIGHT POINTERS HAVING VALUES 0 AND K-1
NOW CHECK IF NUMS[LEFT]+NUMS[RIGHT] <= NUMS[K]
IF SO THEN INCREASE THE COUNT 

*/
