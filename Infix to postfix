Problem Statement




Sample Input 1:
3^(1+1)

Expected Answer:
311+^


Output printed on console:
311+^


Explanation of Sample Input 1:
For this testcase, we will evaluate 'b' = (1+1) first. 

Hence it's equivalent postfix expression will be "11+". 

Next we will evaluate 3^b. It's equivalent postfix expression will be "3b^". 

Replacing 'b' with it's equivalent postfix we get "311+^".


Sample Input 2:
a+b+c+d-e


Expected Answer:
ab+c+d+e-


Output printed on console:
ab+c+d+e-


Expected Time Complexity:
Try to do this in O(n).


Constraints:
1 <= 'n' <= 5000 

‘n’, is the length of EXP
The expression contains digits, lower case English letters, ‘(’, ‘)’, ‘+’, ‘-’, ‘*’, ‘/’, ‘^’. 

Time Limit: 1 sec

#include<bits/stdc++.h>

int prec(char c) 

{

    if(c=='^')

    return 3;

    else if(c=='/' || c=='*')

    return 2;

    else

    return 1;

}

string infixToPostfix(string exp){

    stack <char> st;

    string res="";

    for(int i=0;i<exp.length();i++)

    {

        if(exp[i]=='(')

        st.push(exp[i]);

        else if(exp[i]==')')

        {

        while(st.top()!='(')

        {

        res+=st.top();

        st.pop();

        }

        st.pop();   

        }

        else if((exp[i]>='a'&&exp[i]<='z') || (exp[i]>='0' && exp[i]<='9'))

        res+=exp[i];

        else

        {

            while(!st.empty() && st.top()!='(' && prec(st.top())>=prec(exp[i]))

            {

                res+=st.top();

                st.pop();

            }

            st.push(exp[i]);

        }

    }

    while(!st.empty())

    {

        res+=st.top();

        st.pop();

    }

    return res;

}
