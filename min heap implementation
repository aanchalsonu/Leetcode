roblem statement


Sample Input 1 :
3
2 2
2 1
0
Sample Output 1 :
1
Explanation Of Sample Input 1 :
Insert 2 in the heap, and currently, 2 is the smallest element in the heap.

Insert 1 in the heap and now the smallest element is 1.

Return the smallest element, which is 1.
Sample Input 2 :
5
2 5
2 43
2 15
1 2
0
Sample Output 2 :
15
Explanation Of Sample Input 2 :
Insert 5 in the heap.
Insert 43 in the heap.
Insert 15 in the heap.

Remove element at index 2 i.e. X from the heap.

Return the smallest element, which is 15.
Constraints :
1 <= N <= 10^5
1 <= X <= 50

Time Limit: 1 sec
class minHeap {
public:
    vector<int> heap;
    int size, capacity;
    // Constructor for the class.
    minHeap(int cap) {
        // Write your code here.
        heap.resize(cap);
        size = 0;
        capacity = cap;
    }

    void heapify(int i) {
        int smallest = i;
        int li = 2*i + 1, ri = 2*i + 2;
        if(li < size && heap[li] < heap[smallest]) {
            smallest = li;
        }

        if(ri < size && heap[ri] < heap[smallest]) {
            smallest = ri;
        }

        if(i != smallest) {
            swap(heap[i],heap[smallest]);
            heapify(smallest);
        }
    }

    // Implement the function to remove minimum element.
    int extractMinElement() {
        // Write you code here.
        if(size == 0) return -1;
        int ans = heap[0];
        swap(heap[0],heap[size-1]);
        size--;
        heapify(0);
        return ans;
    }

    // Implement the function to delete an element.
    void deleteElement(int ind) {
        // Write you code here.
        if(ind >= size) return ;
        swap(heap[ind],heap[size-1]);
        size--;
        heapify(ind);
    }

    // Implement the function to insert 'val' in the heap.
    void insert(int val) {
        // Write you code here.
        if(size == capacity) return ;
        heap[size] = val;
        size++;
        int ind = size-1;
        while(ind >= 0) {
            int parent = (ind-1)/2;
            if(heap[parent] > heap[ind]) {
                swap(heap[parent],heap[ind]);
                ind = parent;
            }else break;
        }
    }
};
