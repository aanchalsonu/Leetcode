/*
Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1


*/
// class Solution {
// public:
//     int reversePairs(vector<int>& nums) {
//         long i,j;
//         int count=0;

//         i=0;
//         j = nums.size()-1;

//         while(i<j)
//         {
//             if(nums[i] > (2*nums[j]))
//             {
//                 count++;
//                 i++;
//             }
//             else if(nums[i]<nums[j])
//             {
//                 i++;
//             }
//             else
//             {
//                 j++;
//             }
//         }












//         // for(i=0;i<nums.size();i++)
//         // {
//         //     for(j = i+1;j<nums.size();j++)
//         //     {
//         //         if(nums[i] > (2*nums[j]))
//         //         {
//         //             count++;
//         //         }
//         //     }
//         // }
//         return count;
//     }
// };







class Solution {
public:
void merge(vector<int>&arr,int low,int mid,int high,int &cnt){
    int i=low,j=mid+1;
    int r=j;
    int c=0;
    vector<int>v;
     while(i<=mid){
        while(r<=high and arr[i]>(long long)2*arr[r]){
            c++;
            r++;
        }
        cnt+=c;
        
          while(j<=high and arr[j]<=arr[i])v.push_back(arr[j++]);
          v.push_back(arr[i++]);
     }
     while(j<=high)v.push_back(arr[j++]);
     for(int i=low;i<=high;i++)arr[i]=v[i-low];
}

   void mergesort(vector<int>&arr,int low,int high,int &cnt){
       if(low<high){
      int mid=low+(high-low)/2;
      mergesort(arr,low,mid,cnt);
      mergesort(arr,mid+1,high,cnt);
      merge(arr,low,mid,high,cnt);
       }
   }
    int reversePairs(vector<int>& arr) {
      // merge sort -> modified merge function 
    int cnt=0;
    int n=arr.size();
    mergesort(arr,0,n-1,cnt);
    if(n<=1 or cnt==0)return 0;
    return cnt;
        
    }
};
