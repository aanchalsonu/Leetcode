Problem Statement




Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
5
1 2 2 2 3


Sample Output 1 :
1 2 3


Explanation For Sample Input 1 :
We will delete the duplicate values ‘2’ present in the linked list.


Sample Input 2 :
4
1 2 3 4


Sample Output 2 :
1 2 3 4


Explanation For Sample Input 2 :
The list contains no duplicates, so the final list is unchanged.


Expected Time Complexity :
The expected time complexity is O('n').


Constraints :
1 <= 'n' <= 10^5
1 <= 'data' in any node <= 10^6

Time limit: 1 sec







/************************************************************

    Following is the linked list node structure.
    
    class Node 
    {
        public:
        int data;
        Node* next;

        Node(int data) 
        {
            this->data = data;
            this->next = NULL;
        }
    };
    
************************************************************/

Node * removeDuplicates(Node * head) {
    // Write your code here.

    if(head == NULL)
    return NULL;

    if(head->next == NULL)
    return head;

    Node * curr = head;
    while(curr != NULL)
    {
        if((curr->next != NULL) && curr->data == (curr->next)->data)
        {
            curr->next = (curr->next)->next;
        }
        else
        curr = curr->next;
    }

    return head;
}
