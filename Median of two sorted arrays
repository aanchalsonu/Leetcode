/*

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

*/

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {



        vector<int> v;

        for(auto i : nums1)
        v.push_back(i);

        for(auto i : nums2)
        v.push_back(i);

        sort(v.begin(),v.end());

        int  n = v.size();

        if(n %2 == 0)
        return (v[n/2-1]+v[n/2])/2.0;
        else
        return v[n/2];


        /*
            FIRST MERGE TWO ARRAYS 
            SORT THEM 
            FIND THE MEDIAN BASED ON THE SIZE OF THE NEW ARRAY FORMED
        
        
        
        
        */






        // int i,j
        // int n1 = nums1.size();
        // int n2 = nums2.size();
        // double ans=0;

        // for(i=0;i<n2;i++)
        // {
        //     nums1[n1+i] = nums2[i];
        // }

        // sort(nums1.begin(), nums1.end());
        // int n = nums1.size();
        // if(n %2 == 0)
        // {
        //     ans = (nums1[n/2-1]+nums1[n/2])/2;
        // }
        // else{
        //     ans = (double)nums1[n/2];
        // }

        // return ans;
    }
};
