/*
Given two binary strings a and b, return their sum as a binary string.

 

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"
 

Constraints:

1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.

*/

class Solution {
public:

    /*
        THE LOGIC IS:
        START FROM END POSITION OF BOTH THE STRINGS AND KEEP ADDING THE DIGITS 
        TO THE VARIABLE SUM 
        CONVERT THE CHAR TYPE TO INT INORDER TO CALCULATE THE SUM
        DO THE ABOVE UNTIL EITHER I OR J IS GREATER THEN ZERO.
        ALSO KEEP UPDATING CARRY AND SUM
        CARRY WILL BE SUM/2.
        AND THE NUMBER ADDED TO SUM WILL BE SUM%2.

        REVERSE THE STRING AND RETURN IT AS ANSWER
    */
    string addBinary(string a, string b) {
        int i = a.length()-1;
        int j = b.length()-1;

        string res="";
        int c=0,sum=0;
        while(i>=0 || j>=0)
        {
            sum = c;
            if(i>=0)
            {
                sum = sum + (a[i]-'0');
                i--;
            }
            if(j>=0)
            {
                sum = sum + (b[j]-'0');
                j--;
            }
            res += to_string(sum%2);
            c = sum/2;
        }
        if(c != 0)
        {
            res += to_string(c);
        }
        reverse(res.begin(),res.end());
        return res;
    }
};
