/*
Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 104].
0 <= Node.val <= 105
 

Note: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/

*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void solve(TreeNode* root, vector<int> & v)
    {
        if(root)
        {
            v.push_back(root->val);
            solve(root->left,v);
            solve(root->right,v);
        }
    }


    int getMinimumDifference(TreeNode* root) {
        vector<int> v;
        solve(root,v);
        int i,mini = INT_MAX,diff=0;
        // for(i=1;i<v.size()-1;i++)
        // {
            // diff = abs(v[i]-v[i-1]);
            // if(diff < mini)
            // mini = diff;
        // }


        for(i=0;i<v.size();i++)
        {
            for(int j = i+1;j<v.size();j++)
            {
                diff = abs(v[i]-v[j]);
                if(diff < mini)
                mini = diff;
            }
        }

        return mini;
    }
};
