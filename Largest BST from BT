Problem statement

Given a Binary Tree of N node , find the largest Bst 

Sample Input 1 :
2 1 3 -1 -1 -1 -1
Sample Output 1:
3
Explanation for Sample 1:
In the given binary tree, subtree rooted at 2 is a BST and its size is 3.

Sample Input 2 :
50 -1 20 -1 30 -1 40 -1 50 -1 -1
Sample Output 2:
4
Constraints :
1 <= 'N' <= 10^5
0 <= 'data' <= 10^5     

where 'N' is the number of nodes and 'data' denotes the node value of the binary tree nodes.

Time limit: 1 sec


class info{

    public:

        int maxi;

        int mini;

        bool isBST;

        int size;

};

 

info solve(TreeNode *root, int &ans){

    //base case 

    if(root ==NULL){

        return { INT_MIN, INT_MAX, true, 0};

    }

 

    //call for left and right

    info left = solve(root->left, ans);

    info right = solve(root->right, ans);

    //for curr node lets make a node with all the info values

 

    info currNode;

 

    currNode.size = left.size + right.size +1;

    currNode.maxi = max(right.maxi, root->data);

    currNode.mini = min(root->data, left.mini);

 

    //check if the curr node is bst or not 

 

    if(left.isBST && right.isBST && (root->data > left.maxi && root->data < right.mini))

    {

        currNode.isBST = true;

    }

    else

        currNode.isBST = false;

 

    //now update the answer

    if(currNode.isBST){

        ans = max(ans, currNode.size);

    }

    return currNode;

    

}

int largestBST(TreeNode * root){

    // Write your code here.

    int maxisize = 0;

    info temp = solve(root, maxisize );

    return maxisize;

 

}
