Problem Statement



Sample Input 1 :
6
4 7 8 2 3 1


Sample Output 1 :
-1 -1 2 -1 1 -1 


Explanation of The Sample Input 1 :
In the array 'a':
4 has 7 on its right. Since 7 is not smaller, we update 4 to -1.
7 has 8 on its right. Since 8 is not smaller, we update 7 to -1.
8 has 2 on its right. Since 2 is smaller than 8, we update 8 to 2.
2 has 3 on its right. Since 3 is not smaller, we update 2 to -1.
3 has 1 on its right. Since 1 is smaller than 3, we update 3 to 1.
1 does not have any element on right. So we update 1 to -1.


Sample Input 2 :
4
1 2 3 4


Sample Output 2 :
-1 -1 -1 -1 


Sample Input 3 :
4
4 3 2 1


Sample Output 3 :
3 2 1 -1 


Expected time complexity :
The expected time complexity is O(n).


Constraints :
1 <= 'n' <= 10 ^ 5
1 <= 'a[i]' <= 10 ^ 9

Time Limit : 1 sec



void immediateSmaller(vector<int>& arr)
{
	// Write your code here.

	int n  = arr.size();
	for(int i=0;i<n;i++)
	{
		int j= i+1;
		if(arr[i]>arr[j])
		{
			arr[i] = arr[j];
		}
		else
		arr[i] = -1;
		if(i == n-1)
		arr[i] = -1;
	}
	// int n = A.size();
    // vector<int> ans(n,-1);
    // for(int i=0;i<n;i++)
    // {
    //     int var = -1;
    //     for(int j=i-1;j>=0;j--)
    //     {
    //         if(A[j]<A[i])
    //         {
    //             var = A[j];
    //             break;
    //         }
    //     }
    //     ans[i] = var;
    // }
    // for(int i=0;i<n;i++)
	// {
	// 	A[i] = ans[i];
	// }
}
