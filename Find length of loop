Problem Statement



Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
4 10 3 5
2
Sample Output 1:
3
Explanation Of Sample Input 1 :
The cycle is 10, 3, 5.
Sample Input 2 :
4
4 10 3 5
0
Sample Output 2 :
0
Explanation Of Sample Input 2 :
Since ‘p’ = 0, the last node is pointing to null, so no cycle exists.


Constraints:
1 <= ‘n’ <= 100000
1 <= Data in linked list node <= 10^9
0 <= ‘p’ <= ‘n’




/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 * };
 *
 *************************************************************************/
#include<bits/stdc++.h>

int lengthOfLoop(Node *head) {
    // Write your code here


    if(head == NULL || head->next == NULL)
    return 0;

    unordered_map<Node *,int> mp;

    Node * curr = head;
    int i=0;
    while(curr)
    {
        if(mp.find(curr) == mp.end())
        {
            mp.insert({curr,i});
        }
        else
        {
            return i-mp[curr];
        }
        i++;
        curr = curr->next;
    }
    return 0;






    // Node* slow = head;
    // Node * fast = head;

    // int len =0;

    // Node * curr = head;
    // set<Node *> s;

    // while(s.count(curr) == 0 || curr != NULL)
    // {
    //     len++;
    //     s.insert(curr);
    //     curr = curr->next;
    // }


    // while(fast != NULL && fast->next != NULL)
    // {
    //     fast = fast->next->next;
    //     slow = slow->next;

    //     if(slow == fast)
    //     break;
    // }

    // if(fast->next == NULL || fast == NULL)
    // return 0;

    // fast = head;

    // int count=0;
    // while(fast != slow)
    // {
    //     count++;
    //     fast = fast->next;
    //     slow = slow->next;
    // }

    // return len-count;


}
