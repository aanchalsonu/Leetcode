Problem statement
You are given a directed acyclic graph of 'N' vertices(0 to 'N' - 1) and 'M' weighted edges.



Return an array that stores the distance(sum of weights) of the shortest path from vertex 0 to all vertices, and if it is impossible to reach any vertex, then assign -1 as distance.



For Example:
'N' = 3, 'M' = 3, 'edges' = [0, 1, 2], [1, 2, 3], [0, 2, 6]].

Distance (0 to 0) = 0.
Distance (0 to 1) = 2.
Distance (0 to 2) = 0->1 + 1->2 = 2+3 = 5.
So our answer is [0, 2, 5].
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
3 3
2 0 4
0 1 3
2 1 2
Sample Output 1:
0 3 -1
Explanation of sample output 1:

Distance (0 to 0) = 0.
Distance (0 to 1) = 3.
Distance (0 to 2) = We cannot reach vertex 2 from 0.
So our answer is [0, 3, -1].
Sample Input 2:
4 4
2 1 5
0 2 3
0 1 2
2 3 1
Sample Output 2:
0 2 3 4
Constraints:
1 <= 'N', 'M' <= 10^5
1 <= edge weight <= 10^




#include<bits/stdc++.h>

void dfs(int node, unordered_map<int,bool> &visited,stack<int> &s,unordered_map<int,list<pair<int,int>>> &adj){

    visited[node] = true;

    for(auto j:adj[node]){

        if(!visited[j.first]){

            dfs(j.first,visited,s,adj);

        }

    }

    s.push(node);

}

vector<int> shortestPathInDAG(int n, int m, vector<vector<int>> &edges)

{

    unordered_map<int,list<pair<int,int>>> adj;

    for(int i = 0; i<m; i++){

      int u = edges[i][0];

      int v = edges[i][1];

      int w = edges[i][2];

      pair<int,int> p = make_pair(v,w);

      adj[u].push_back(p);

    }

    unordered_map<int,bool> visited;

    stack<int> s;

    vector<int> distance(n,INT_MAX);

    for(int i = 0; i<n; i++){

        if(!visited[i]){

            dfs(i,visited,s,adj);

        }

    }

    int src = 0;

    distance[src] = 0;

    while(!s.empty()){

        int top = s.top();

        s.pop();

        if(distance[top]!=INT_MAX){

            for(auto i:adj[top]){

                if(i.second  + distance[top] < distance[i.first]){

                    distance[i.first] = i.second  + distance[top];

                }

            }

        }

    }

    for(int i = 0; i<distance.size();i++){

        if(distance[i] == INT_MAX){

            distance[i] = -1;

        }

    }

    return distance;

    

 

    // Write your code here

}

