Given a binary tree, determine if it is 
height-balanced
.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104








/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int solveMini(TreeNode * root)
    {
        if(root == NULL)
        return 0;
        int l = solveMini(root->left);
        int r = solveMini(root->right) ;
        int mini = l<r ? l: r;
        
        return mini;
    }

    int solveMaxi(TreeNode * root)
    {
        if(root == NULL)
        return 0;
        int l = solveMini(root->left);
        int r = solveMini(root->right) ;
        int maxi = l>r ? l+1 : r+1;
        return maxi;
    }


    int height(TreeNode * root)
    {
        if(root == NULL)
        return 0;

        int l = height(root->left);
        int r = height(root->right);

        if(l == -1 ||  r== -1 || abs(l-r) >1)
        return -1;
        return max(l,r)+1;
    }

    bool isBalanced(TreeNode* root) {


        if(root == NULL)
        return true;
        if(height(root) != -1)
        return true;
        else
        return false;


        // int mini = solveMini(root);
        // int maxi = solveMaxi(root);

        // if(maxi-mini <=1)
        // return true;
        // else
        // return false;
    }
};
