/*

Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.

*/

class Solution {
public:
    bool isPalin(string str,int start, int end)
    {
        while(start<+end)
        {
            if(str[start] != str[end])
            {
                return false;
            }
            start++;
            end--;
        }
        return true;

        // int i=0,j=str.length()-1;
        // while(i<=str.length()/2 && j>=str.length()/2)
        // {
        //     if(str[i] != str[j])
        //     return false;
        //     i++;
        //     j--;
        // }
        // return true;
    }

    void solve(string s,vector<vector<string>> &ans,vector<string> output,int index)
    {
        if(index >= s.length())
        {
            ans.push_back(output);
            return;
        }

        for(int i=index;i<s.length();i++)
        {
            if(isPalin(s,index,i))
            {
                output.push_back(s.substr(index,i-index+1));
                solve(s,ans,output,i+1);
                output.pop_back();
            }
        }

        // solve(s,ans,output,index+1);
        // if(isPalin(s.substr(index,s.length())) && s.length()>0)
        // output.push_back(s.substr(index,s.length()));
        // solve(s,ans,output,index+1);
    }



    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> output;
        solve(s,ans,output,0);
        // call the above function to recursively generate substrings and then call isPalin function to check if the generated substring is valid palindrome
        return ans;
    }
};
