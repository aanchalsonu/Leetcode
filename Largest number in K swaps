/*

Given a number K and string str of digits denoting a positive integer, build the largest number possible by performing 
swap operations on the digits of str at most K times.


Example 1:

Input:
K = 4
str = "1234567"
Output:
7654321
Explanation:
Three swaps can make the
input 1234567 to 7654321, swapping 1
with 7, 2 with 6 and finally 3 with 5
Example 2:

Input:
K = 3
str = "3435335"
Output:
5543333
Explanation:
Three swaps can make the input
3435335 to 5543333, swapping 3 
with 5, 4 with 5 and finally 3 with 4 

Your task:
You don't have to read input or print anything. Your task is to complete the function findMaximumNum() which takes the 
string and an integer as input and returns a string containing the largest number formed by perfoming the swap operation at most k times.


Expected Time Complexity: O(n!/(n-k)!) , where n = length of input string
Expected Auxiliary Space: O(n)

*/

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends


class Solution
{
    public:
    //Function to find the largest number after k swaps.
    
    /*
    
    TIME LIMIT EXCEED ERROR (BRUT FORCE MRTHOD)
    
    void solve(string str, int k , string & maxi)
    {
        //base case
        if(k==0)
        return ;
        
        int n = str.length();
        
        //first iterate through each of the element of string , second pointer to check for the nect swap 
        
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                //if number at i < number at j then swap the characters in place
                if(str[i] < str[j])
                {
                    swap(str[i],str[j]);
            
                //compare the swapped strinf to the maximum string, if the new string is maximum then value os maxi changes to str
                    if(str.compare(maxi) > 0)
                    {
                        maxi = str;
                    } 
                    //call the function again with reduced k value
                    solve(str,k-1,maxi);
                    
                    // For backtracking
                    swap(str[i],str[j]);
                }
            }
        }
    }
    
    */
        
    void solve(
    string str, int k,
    string& max, int ctr)
{
    // return if no swaps left
    if (k == 0)
        return;
 
    int n = str.length();
 
    // Consider every digit after
    // the cur position
    char maxm = str[ctr];
    for (int j = ctr + 1; j < n; j++) {
        // Find maximum digit greater
        // than at ctr among rest
        if (maxm < str[j])
            maxm = str[j];
    }
 
    // If maxm is not equal to str[ctr],
    // decrement k
    if (maxm != str[ctr])
        --k;
 
    // search this maximum among the rest from behind
    //first swap the last maximum digit if it occurs more than 1 time
   //example str= 1293498 and k=1 then max string is 9293418 instead of 9213498
    for (int j = n-1; j >=ctr; j--) {
        // If digit equals maxm swap
        // the digit with current
        // digit and recurse for the rest
        if (str[j] == maxm) {
            // swap str[ctr] with str[j]
            swap(str[ctr], str[j]);
 
            // If current num is more than
            // maximum so far
            if (str.compare(max) > 0)
                max = str;
 
            // recurse other swaps after cur
            solve(str, k, max, ctr + 1);
 
            // Backtrack
            swap(str[ctr], str[j]);
        }
    }
}
    
    string findMaximumNum(string str, int k)
    {
       // code here.
       string maxi = str;
       solve(str,k,maxi,0);
       return maxi;
    }
};

//{ Driver Code Starts.

int main()
{
    int t, k;
    string str;

    cin >> t;
    while (t--)
    {
        cin >> k >> str;
        Solution ob;
        cout<< ob.findMaximumNum(str, k) << endl;
    }
    return 0;
}

// } Driver Code Ends
