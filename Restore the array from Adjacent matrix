/*

There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.

You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.

It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1],
nums[i]]. The pairs can appear in any order.

Return the original array nums. If there are multiple solutions, return any of them.

 

Example 1:

Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.
Notice that adjacentPairs[i] may not be in left-to-right order.
Example 2:

Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.
Another solution is [-3,1,4,-2], which would also be accepted.
Example 3:

Input: adjacentPairs = [[100000,-100000]]


*/

class Solution {
public:

 vector<int> restoreArray(vector<vector<int>>& adjacentPairs) 
    {
        int n=adjacentPairs.size();
        vector<int> ans(n+1);
        map<int,int> m, m1, m2;
        for(auto it: adjacentPairs) 
        {
            m[it[0]]++;
            m[it[1]]++;
            if(m1.find(it[0])==m1.end()) m1[it[0]]=it[1];
            else if(m2.find(it[0])==m2.end()) m2[it[0]]=it[1];
            if(m1.find(it[1])==m1.end()) m1[it[1]]=it[0];
            else if(m2.find(it[1])==m2.end()) m2[it[1]]=it[0];
        }
        for(auto it: m)
        {
            if(it.second==1)
            {
                ans[0]=it.first;
                break;
            }
        }
        set<int> taken;
        taken.insert(ans[0]);
        for(int x=1; x<=n; x++)
        {
            if(m1.find(ans[x-1])!=m1.end() && taken.find(m1[ans[x-1]])==taken.end()) ans[x]=m1[ans[x-1]];
            else ans[x]=m2[ans[x-1]];
            taken.insert(ans[x]);
        }
        return ans;
    }
    // vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {
    //     vector<int> ans;
    //     // set<int> s;

    //     int n = adjacentPairs.size();
    //     // int m = adjacentPairs[0].size();

    //     for(int i=0;i<n;i++)
    //     {
    //         auto it = find(ans.begin(),ans.end(),adjacentPairs[i][0]);
    //         auto it1 = find(ans.begin(),ans.end(),adjacentPairs[i][1]);
    //         if(it == ans.end() && it1 == ans.end())
    //         {
    //             if(adjacentPairs[i][0] < adjacentPairs[i][1])
    //             {
    //                 ans.push_back(adjacentPairs[i][0]);
    //                 ans.push_back(adjacentPairs[i][1]);
    //             }
    //             else
    //             {
    //                 ans.push_back(adjacentPairs[i][1]);
    //                 ans.push_back(adjacentPairs[i][0]);
    //             }
    //         }
    //         else if(it == ans.end() && it1 != ans.end())
    //         {
    //             ans.push_back(adjacentPairs[i][0]);
    //         }
    //         else if(it != ans.end() && it1 == ans.end())
    //         {
    //             ans.push_back(adjacentPairs[i][1]);
    //         }
    //     }

    //     // for(auto itr : s)
    //     // {
    //     //     ans.push_back(itr);
    //     // }

    //     return ans;
    // }
};
Output: [100000,-100000]
