There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.


  class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>> &prerequisites){
        vector<int> adj[numCourses];

        // Creating Adjacency List
        for (auto it : prerequisites){
            adj[it[0]].push_back(it[1]);
        }

        return using_kahnAlgo(numCourses, adj);
    }

    bool using_kahnAlgo(int V, vector<int> adj[]){

        vector<int> indegree(V, 0);

        for (int i = 0; i < V; i++){
            for (int adjNode : adj[i]){
                indegree[adjNode]++; // calculating indegree of every node
            }
        }

        queue<int> q;
        for (int i = 0; i < V; i++){
            if (indegree[i] == 0){
                q.push(i); // pushing starting sources
            }
        }

        vector<int> topo;
        while (!q.empty()){
            int node = q.front();
            q.pop();

            topo.push_back(node);

            for (int adjNode : adj[node]){
                indegree[adjNode]--;

                // new start points
                if (indegree[adjNode] == 0){
                    q.push(adjNode);
                }
            }
        }

        if (topo.size() == V){
            return true;
        }

        return false;
    }
};
  
