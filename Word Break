/*
Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false

*/

class Solution {
public:
    bool solve(int idx,string s,set<string>&se,int prev,map<pair<int,int>,bool>&dp){
    
    if(idx>=s.length()){
        return true;
    }
    
    if(idx==s.length()-1){
        
        string str = s.substr(prev+1,idx+1);
        
        if(se.find(str)!=se.end()){
            return true;
        }
        else{
            return false;
        }
    }
    
    if(dp.count({idx,prev})>0){
        return dp[{idx,prev}];
    }
    
    
    for(int i=idx;i<s.length();i++){
        string str = s.substr(prev+1,i+1-prev-1);
        
        if(se.find(str)!=se.end()){
            
            bool val1 = solve(i+1,s,se,i,dp);
            
            bool val2 = solve(i+1,s,se,prev,dp);
            
            return dp[{idx,prev}] = val1 | val2;
        }
    }
    return false;
    
}

bool wordBreak(string s, vector<string>& wordDict) {
    
    set<string> se;
    
    for(auto word : wordDict){
        se.insert(word);
    }
    
    map<pair<int,int>,bool> dp;
    
    return solve(0,s,se,-1,dp);
}
};





















class Solution {
public:

    bool wordBreak(string s, vector<string>& wordDict) {
    const int n = s.length();
    const int maxLength = getMaxLength(wordDict);
    const unordered_set<string> wordSet{begin(wordDict), end(wordDict)};
    vector<int> dp(n + 1);
    dp[0] = true;

    for (int i = 1; i <= n; ++i)
      for (int j = i - 1; j >= 0; --j) {
        if (i - j > maxLength)
          break;
        if (dp[j] && wordSet.count(s.substr(j, i - j))) {
          dp[i] = true;
          break;
        }
      }

    return dp[n];
  }

 private:
  int getMaxLength(const vector<string>& wordDict) {
    return max_element(begin(wordDict), end(wordDict),
                       [](const auto& a, const auto& b) {
                         return a.length() < b.length();
                       })
        ->length();
  }
};
