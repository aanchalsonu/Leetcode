Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.

 

Example 1:

Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 
Example 2:

Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 
Example 3:

Input: s = "abc"
Output: 1
 

Constraints:

3 <= s.length <= 5 x 10^4
s only consists of a, b or c characters.



class Solution {
public:
    int numberOfSubstrings(string s) {
        int left=0, right=0, count=0, n= s.size()-1 ,work=1;
        unordered_map<char, int> mpp ;
        
        for(right=0;right<n+1;right++){
            mpp[s[right]]++ ;
            
            while(mpp['a']  &&  mpp['b']  &&  mpp['c']){
                count += 1+ (n - right) ;
                
                mpp[s[left]]-- ;
                left++ ;
                cout<<right<<" ";
            }
            
            
        }
        
        return count ;
    }
};
