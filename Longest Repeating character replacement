/*
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character.
You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
There may exists other ways to achive this answer too.

*/


class Solution {
public:
    int characterReplacement(string s, int k) {
        if(s.size() == 0)
        return 0;
        
        //create an array to store frequency count
        vector<int> arr(128);
        
        //two variables beginning and largest count t =o find the current largest count of the characters from the given window
        int beg=0, largestCount=0;

        //traverse through the array to find the frequency of characters
        for(int end =0 ;end<s.size();end++)
        {
            //largestcount will be the max of frequency
            largestCount = max(largestCount,++arr[s[end]]);

            //if this condition satisfies where end-beg+1-largestcount > K then it is not possible to find the substring from 
//this current window so shift the pointer to point to the next character.
            //At the same time decrement the count of the begenning character
            if(end-beg+1-largestCount > k)
            arr[s[beg++]]--;
        
        }

        //return the longest possible length
        return s.length()-beg;

    }
};
