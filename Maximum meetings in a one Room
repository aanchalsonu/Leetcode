There is one meeting room in a firm. There are N meetings in the form of (S[i], F[i]) where S[i] is the start time of meeting i and F[i] is the finish time of meeting i. The task is to find the maximum number of meetings that can be accommodated in the meeting room. You can accommodate a meeting if the start time of the meeting is strictly greater than the finish time of the previous meeting. Print all meeting numbers.

Note: If two meetings can be chosen for the same slot then choose meeting with smaller index in the given array.

 

Example 1:

Input:
N= 6
S = {1,3,0,5,8,5}
F = {2,4,6,7,9,9} 
Output:
{1,2,4,5}
Explanation:
We can attend the 1st meeting from (1 to 2),
then the 2nd meeting from (3 to 4), then the
4th meeting from (5 to 7), and the last meeting
we can attend is the 5th from (8 to 9). It can
be shown that this is the maximum number of
meetings we can attend.
 

Example 2:

Input:
N= 1
S = {3}
F = {7}
Output:
{1}
Explanation:
Since there is only one meeting, we can attend the meeting.


//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Solution{
public:

    static bool cmp(pair<int,int> a,pair<int,int> b)
    {
        return a.second > b.second;
    }
     
     
    vector<int> maxMeetings(int n,vector<int> &S,vector<int> &F){
        
        vector<int> res;
        
        vector<vector<int>> p(n,vector<int>(3,-1));
        //3 for final time, start time and index
        
        for(int i=0;i<n;i++)
        {
            p[i][0]= F[i];
            p[i][1] = S[i];
            p[i][2] = i;
        }
        
        sort(p.begin(),p.end());
        
        int curr = p[0][0] ; //final time of first process
        res.push_back(p[0][2]+1);//index+1 of the first process is allready inside, plus 1 because of zero based indexing
        
        for(int i=1;i<n;i++)
        {
            if(curr < p[i][1]) // agar mere meeting ka completion time kishe aur ke meeting ka start time sa 
            //kam hai tho overlap nahi hoga and meetings are possible
            {
                res.push_back(p[i][2]+1);
                curr = p[i][0];
            }
        }
        
        sort(res.begin(),res.end());
        return res;
        
        
        
        
        
        
        
        
        
        
        // vector<pair<int,int>> v;
        // for(int i=0;i<n;i++)
        // {
        //     v.push_back({S[i],F[i]});
        // }
        
        // sort(v.begin(),v.end(),cmp);
        
        // int curr = v[0].second;
        // for(int i=1;i<n;i++)
        // {
        //     if(v[i].first > curr)
        //     {
        //         res.push_back(i);
        //         curr = v[i].first;
        //     }
        // }
        
        // sort(res.begin(),res.end());
        // return res;
        
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<int> S(n),F(n);
        for(int i=0;i<n;i++){
            cin>>S[i];
        }
        for(int i=0;i<n;i++){
            cin>>F[i];
        }
        Solution ob;
        vector<int> ans=ob.maxMeetings(n,S,F);
        for(int i=0;i<ans.size();i++){
            cout<<ans[i];
            if(i!=ans.size()-1){
                cout<<" ";
            }
        }
        cout<<endl;
    }
    return 0;
}
// } Driver Code Ends
