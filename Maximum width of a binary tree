Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the 






null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).
Example 2:


Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).
Example 3:


Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode *,long long int>> q;
        q.push({root,0});

        int res=0;
        while(!q.empty())
        {
            int n = q.size();

            int minind = q.front().second;
            int left=0,right=0;
            for(int i=0;i<n;i++)
            {
                TreeNode *curr = q.front().first;
                long long int idx = q.front().second-minind;
                q.pop();

                if(curr->left)
                q.push({curr->left,idx*2+1});
                if(curr->right)
                q.push({curr->right,idx*2+2});

                if(i==0)
                left = idx;
                if(i == n-1)
                right = idx;
            }

            res = max(res,right-left+1);
        }
        return res;
    }
};
