There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 

Constraints:

n == ratings.length
1 <= n <= 2 * 104
0 <= ratings[i] <= 2 * 104





class Solution {
public:
    int candy(vector<int>& ratings) {
        int c=0,i;
        int n ;
        
        n = ratings.size();
        vector<int> ans(n, 1);

        for(i=1;i<n;i++)
        {
            if(ratings[i] > ratings[i-1])
            {
                ans[i] = ans[i-1] + 1;
            }
        }


        for(i = n-2;i>=0;i--)
        {
            if(ratings[i] > ratings[i+1] && ans[i] <= ans[i+1])
            {
                ans[i] = ans[i+1]+1;
            }
        }

        return accumulate(ans.begin(),ans.end(), 0LL);

        /*

            for loop ---------------->
            If ratings[i]>ratings[i-1]
                    i+1 th child get one more candy than i th child,so increase it once
            for loop <-----------------
            If ratings[i]>ratings[i+1]
                i th child get one more candy than i+1 th child, so increase it once 

            ACCUMULATE FUNCTION IS USED TO FIND THE SUM OF ALL THE ELEMENTS FROM ANS.BEGIN() TO ANS.END() WITH THE INITIAL VALUE OF 0 
            IT KEEPS ON ADDDING EACH ELEMENT TO THE INITIAL VLAUE
            AND RETURN THE SUM


            WE USE CONDITION ANS[I] < = ANS[I+1]
            TO ENSURE THAT WE DONT UNNECESSARILY INCREMENT THE COUNT VLAUES

        */

       
    }
};
