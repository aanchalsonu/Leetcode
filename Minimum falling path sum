/*
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally 
left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.

*/

class Solution {
public:


    int solve(int i,int j,vector<vector<int>>& mat, vector<vector<int>>& dp)
    {
        if(!i)
        return mat[i][j];


        if(dp[i][j] != 1e6) return dp[i][j];
        int minSum = 1e6;
        int currSum = mat[i][j];
        minSum = min(minSum,solve(i-1,j,mat,dp));
        if(j-1 >=0)
        minSum =  min(minSum, solve(i - 1,j - 1, mat, dp));
        if(j+1 < mat.size())
        minSum = min(minSum,solve(i-1,j+1,mat,dp));

        return dp[i][j] = minSum + currSum;

    }


    int minFallingPathSum(vector<vector<int>>& matrix) {
        int sum=INT_MAX;
        int i,j,n,m,mini;
        n = matrix.size();
        m = matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(n, 1e6));
        //starting from n-1 for both i and j 
        for(j=n-1;j>=0;j--)
        {
            sum = min(sum, solve(n-1,j,matrix,dp));
        }
        
        return sum;
    }
};
