Problem Statement



Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
5
1 3
2
1 4
2
2
Sample Output 1 :
3 4 -1
Explanation Of Sample Input 1:
Input: ‘q’ = 5
‘queries’ = [[1 3], [2], [1 4], [2], [2]]

Output: 3 4 -1

Explanation: After the first query, the queue is {3}. After the second query, the queue is {}, and we returned 3. After 
the third query, the queue is {4}. After the fourth query, the queue is {}, and we returned 4. After the fifth query, 
the queue is {}, and we returned -1(since there was no element at the time of the pop statement).
Sample Input 2:
2
2
1 1
Sample Output 2:
-1
Explanation Of Sample Input 2:
Input: ‘q’ = 2
‘queries’ = [[2], [1 1]]

Output: -1

Explanation: After the first query, the queue remains {}, and we returned -1. After the second query, the queue is {1}.
Constraints:
2 <= q <= 10^4
1 <= Element ‘x’ in the push function <= 10^5

Time Limit: 1-sec


/**
 * Definition of linked list
 * class Node {
 * 
 * public:
 *     int data;
 *     Node* next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node* next) : data(x), next(next) {}
 * };
 * 
 * Definition of Queue
 * struct Queue {
 *   Node* front;
 *   Node* rear;
 *   void push(int);
 *   int pop();
 *   
 *   Queue() {
 *       front = rear = NULL;
 *   }
 * };
 */

Node * head = NULL;
Node * temp = head;

void Queue::push(int x) {
    // Write Your Code Here
    if(head == NULL)
    {
        Node * newNode = new Node(x);
        head = newNode;
        temp = newNode; 
    }
    else
    {
        Node * newNode = new Node(x);
        temp->next = newNode;
        temp = newNode;
    }
    
}

int Queue::pop() {
    // Write Your Code Here
    if(head == NULL)
    return -1;
    else
    {
        Node * y = head;
        head = head->next;
        int w = y->data;
        delete y;
        return w;
    }
}
