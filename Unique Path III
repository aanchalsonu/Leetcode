/*
You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

*/

class Solution {
public:
    int m,n, ecount=1, res=0;
    int uniquePathsIII(vector<vector<int>>& grid) {
        int x,y;
        m = grid.size();
        n = grid[0].size();

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j] == 1)//start
                {
                    x=i;
                    y = j;
                }
                else if(grid[i][j] == 0)
                ecount++;
            }
        }
        dfs(grid,x,y,0);
        return res;
    }

    void dfs(vector<vector<int>>& g, int i,int j, int count)
    {
        if(i<0 || i>=m || j<0 || j>=n || g[i][j] == -1)
        return;

        if(g[i][j] == 2)
        {
            if(count == ecount)
            res++;
            return ;
        }

        g[i][j]= -1;
        count++;
        dfs(g,i+1,j,count);
        dfs(g,i-1,j,count);
        dfs(g,i,j+1,count);
        dfs(g,i,j-1,count);

        g[i][j] =0;
    }
};
