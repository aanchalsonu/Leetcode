Given two linked lists that represent two large positive numbers. The task is to subtract the given two number
s represented by the linked list. Subtract the smaller from the larger one.

Example 1:

Input:
L1 = 1->0->0
L2 = 1->2
Output: 8 8
Explanation:  12 subtracted from 100
gives us 88 as result.

Your Task:
The task is to complete the function subLinkedList() which should subtract the numbers represented by the linked list
and return the head of the linked list representing the result.


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= Length of the Linked List <= 10000



//{ Driver Code Starts
// driver

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}

Node* subLinkedList(Node* l1, Node* l2);

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        
        cin>>n;
        Node* first = buildList(n);
        
        cin>>m;
        Node* second = buildList(m);
        
        Node* res = subLinkedList(first,second);
        printList(res);
    }
    return 0;
}

// } Driver Code Ends


/* Structure of linked list Node

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
    
};

*/

//You are required to complete this method

Node* rev(Node* head)
{
    Node* prev = NULL;
    Node* cur = head;
    Node* next;
    
    while(cur)
    {
        next = cur->next;
        cur->next = prev;
        
        prev = cur;
        cur = next;
    }
    return prev;
}

Node* solve(Node* l1, Node* l2)
{
    l1 = rev(l1);
    l2 = rev(l2);
    
    int borrow = 0;
    Node* head = l1;
    while(l1 || l2)
    {
        int val1 = l1->data;
        int val2 = 0;
        
        if(l2)
            val2 = l2->data;
            
        int temp = val1 - val2 + borrow;
        if(temp < 0)
        {
            temp += 10;
            borrow = -1;
        }
        else if(temp >= 0)
        {
            borrow = 0;
        }
        l1->data = temp;
        
        l1 = l1->next;
        if(l2)
            l2 = l2->next;
    }
    return rev(head);
}
Node* subLinkedList(Node* l1, Node* l2)
{
    while(l1 && l1->data == 0)
        l1 = l1->next;
    while(l2 && l2->data == 0)
        l2 = l2->next;
    int len1 = 0;
    Node* temp = l1;
    while(temp)
    {
        temp = temp->next;
        len1++;
    }
    temp = l2;
    int len2 = 0;
    while(temp)
    {
        temp = temp->next;
        len2++;
    }
    
    Node* ans = NULL;
    if(len1 < len2)
        ans =  solve(l2, l1);
    else if(len1 > len2)
        ans =  solve(l1, l2);
    else
    {
        int flag = -1;
        while(l1)
        {
            if(l1->data < l2->data)
            {
                flag = 1;
                break;
            }
            else if(l1->data > l2->data)
            {
                flag = 0;
                break;
            }
            l1 = l1->next;
            l2 = l2->next;
        }
        
        if(flag > 0)
        {
          
            ans = solve(l2, l1);
        }
        else
        {
            ans = solve(l1, l2);   
        }
    }
    
    while(ans && ans->data == 0)
        ans = ans->next;
    if(ans == NULL)
        return new Node(0);
    return ans;
}
