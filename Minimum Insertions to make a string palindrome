/*
Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
*/

class Solution {
public:

    int solve(int i,int j,string &s,vector<vector<int>> &dp)
    {
        if(i>=j)
        return 0;


        if(dp[i][j] != -1)
        return dp[i][j];

        if(s[i]==s[j])
        {
            return dp[i][j] = solve(i+1,j-1,s,dp);
        }
        else
        {
            return dp[i][j] = min(solve(i+1,j,s,dp),solve(i,j-1,s,dp))+1;
        }

    }


    int minInsertions(string s) {
        int n = s.length();
        vector<vector<int>> dp (n,vector<int>(n,-1));
        return solve(0,n-1,s,dp);



        // int i,j,count=0;
        // i=0;
        // j = s.length()-1;    
        // while(i<j)
        // {
        //     if(s[i] != s[j])
        //     {
        //         if(s[i+1] != s[j])
        //         {
        //             count += 2;
        //             i++;
        //             j--;
        //         }
        //         else
        //         {
        //             count++;
        //             i++;
        //         }
        //     }
        //     else
        //     {
        //         i++;
        //         j--;
        //     }
        // }
        // return count;
    }
};
