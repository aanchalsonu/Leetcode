You have N books, each with Ai number of pages. M students need to be allocated contiguous books, with each student 
getting at least one book. Out of all the permutations, the goal is to find the permutation where the student with the
most books allocated to him gets the minimum number of pages, out of all possible permutations.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).

 

Example 1:

Input:
N = 4
A[] = {12,34,67,90}
M = 2
Output:113
Explanation:Allocation can be done in 
following ways:
{12} and {34, 67, 90} Maximum Pages = 191
{12, 34} and {67, 90} Maximum Pages = 157
{12, 34, 67} and {90} Maximum Pages =113.
Therefore, the minimum of these cases is 113,
which is selected as the output.

Example 2:

Input:
N = 3
A[] = {15,17,20}
M = 2
Output:32
Explanation: Allocation is done as
{15,17} and {20}




//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

class Solution 
{
    public:
    bool isPossibleSolution(int A[], int N, int M, int mid)
    {
        int countStudent = 1;
        int pageSum = 0;
        for(int i = 0; i < N; i++)
        {
            if(pageSum + A[i] <= mid)
            {
                pageSum += A[i];
            }
            else
            {   
                countStudent++;
                if(countStudent > M || A[i] > mid)
                {   
                    return false;
                }
                pageSum = A[i];
           }
        }
        return true;
    }
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {
        //code here
        int start = 0, sum = 0;
        for(int i = 0; i < N; i++)
            sum += A[i];
        int end = sum;
        int mid = start + (end - start) / 2;
        int ans = -1;
        if(M > N)
            return ans;
        while(start <= end)
        {
            if(isPossibleSolution(A, N, M, mid))
            {
                ans = mid;
                end = mid - 1;
            }
            else
                start = mid + 1;
            mid = start + (end - start) / 2;
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends



