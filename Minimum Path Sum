/*

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100

*/

class Solution {
public:


    int solve(int i,int j,vector<vector<int>> & grid, vector<vector<int>>& dp)
    {
        if(i == 0 && j==0)
        return grid[0][0];

        if(i<0 || j< 0)
        return 1e7;

        if(dp[i][j] != -1)
        return dp[i][j];

        int ans1 = grid[i][j] + solve(i-1,j,grid,dp);
        int ans2 = grid[i][j] + solve(i,j-1,grid,dp);

        return dp[i][j] = min(ans1,ans2);
    }

    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int> (m,-1));
        return solve(n-1,m-1,grid,dp);
    }
};
