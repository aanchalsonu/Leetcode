/*

Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + 
                                                                                                                    nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105
0 <= left <= right < nums.length
At most 104 calls will be made to sumRange.

*/

class NumArray {
public:
    vector<int> a;
    //create an array "a" which will store the sus of corresponding elements.
    //while calulating store the values in "a" ad the addition of current elemenrt and the number in the array nums at that paticular position.
    NumArray(vector<int>& nums) {
        a.push_back(nums[0]);
        int i;
        for(i=1;i<nums.size();i++)
        {
            a.push_back(nums[i] + a[i-1]);
        }
    }
    
    //to return the sum of range of elements we can use the array a that has allready stored the sums of the elements 
    // if left is 0 then we just return the element in array a at the index right
    //else substract the value of a[left-1] from the array a at the eindex right
    
    int sumRange(int left, int right) {
        if(left == 0)
        return a[right];

        return a[right] - a[left-1]; 
        
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */
