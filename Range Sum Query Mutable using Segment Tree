/*
Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + 
nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
0 <= index < nums.length
-100 <= val <= 100
0 <= left <= right < nums.length

*/


cclass NumArray {
public:
    vector<int> st;
    vector<int> vals;
    int n;
    NumArray(vector<int>& nums): n(nums.size()), st(4*nums.size(),0) {
        vals = nums;
        build(0, 0, n-1);
    }

    void build(int node, int start, int end) {
        if (start == end) {
            st[node] = vals[start];
            return;
        }
        int mid = (start+end)/2;
        build(2*node+1, start, mid);
        build(2*node+2, mid+1, end);
        st[node] = st[2*node+1]+st[2*node+2];
    }

    void updateST(int node, int start, int end, int index, int val) {
        if (start == end) {
            st[node] = val;
            return;
        }
        int mid = (start+end)/2;
        if (index<=mid) updateST(2*node+1, start, mid, index, val);
        else updateST(2*node+2, mid+1, end, index, val);
        st[node] = st[2*node+1]+st[2*node+2];
    }

    void update(int index, int val) {
        updateST(0, 0, n-1, index, val);
        vals[index] = val;
    }

    int sumRangeHelper(int node, int start, int end, int left, int right) {
        if (start>right || end<left) return 0;
        if (start>=left && end<=right) return st[node];
        int mid = (start+end)/2;
        int leftSum = sumRangeHelper(2*node+1, start, mid, left, right);
        int rightSum = sumRangeHelper(2*node+2, mid+1, end, left, right);
        return leftSum+rightSum;
    }

    int sumRange(int left, int right) {
        return sumRangeHelper(0, 0, n-1, left, right);
    }
};
/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
At most 3 * 104 calls will be made to update and sumRange.
