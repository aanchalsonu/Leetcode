Problem statement
Given a maze in the form of a binary rectangular matrix of size M*N, where each element can either be 0 or 1, the task is to find the length of the shortest path in a maze from a given source cell to a destination cell.

The path can only be created out of a cell if its value is 1 and at any given moment, we can only move one step in one of the four directions. The valid moves are:

Up: (x, y) -> (x - 1, y)
Left: (x, y) -> (x, y - 1)
Down: (x, y) -> (x + 1, y)
Right: (x, y) -> (x, y + 1)
If there is no path from a given source cell to a destination cell, return -1.

For example :
consider the binary matrix below. If source = (0, 0) and destination = (3, 4), the shortest path from source to destination has length 11.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= T <= 10
1 <= M, N <= 100

Time Limit: 1sec
Sample Input 1 :
2
3 4
1 1 1 1
0 1 1 0
0 0 1 1
0 0
2 3
2 2
1 1
0 1
0 0
1 1
Sample Output 1 :
5
2
Explanation of Sample Input 1 :
For the first test case, the shortest path between the source cell (0, 0) and destination cell (2,3) is highlighted in the figure below, having a length of 5.

For the second test case, the only path from the source cell to the destination cell has a length of 2.
Sample Input 2 :
2
2 2
1 1
1 1
0 1
1 1
2 2
1 0
0 1
0 0
1 1
Sample Output 2 :
1
-1




#include<bits/stdc++.h>

int shortestPathBinaryMatrix(vector<vector<int>> &matrix, pair<int, int> src,
                             pair<int, int> dest) {
  // Write your code here
   if(matrix[src.first][src.second]==0) return -1;

    if(src.first==dest.first and src.second==dest.second)
    return 0;
  queue<pair<int, pair<int, int>>> q;
  int n = matrix.size();
  int m = matrix[0].size();
  int dr[] = {-1, 0, 1, 0};
  int dc[] = { 0, 1, 0, -1};
  q.push({0, {src.first, src.second}});
  vector<vector<int>> dist(n,vector<int>(m,1e9));
  dist[src.first][src.second] = 0;
  while(!q.empty())
  {
      auto it = q.front();
      q.pop();
      int d = it.first;
      int r = it.second.first;
      int c = it.second.second;
      for(int i=0;i<4;i++)
      {
          int newr = r + dr[i];
          int newc = c + dc[i];
          if(newr >= 0 && newr <n && newc>=0 && newc <m && matrix[newr][newc] == 1 && d+1 < dist[newr][newc])
          {
              dist[newr][newc] = 1 + d;
              if(newr == dest.first && newc == dest.second)
              return 1+d;
              q.push({1 + d, {newr,newc}});
          }
      }
  }
  return -1;
}
