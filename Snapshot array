/*
Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length. Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:

Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
 

Constraints:

1 <= length <= 5 * 104
0 <= index < length
0 <= val <= 109
0 <= snap_id < (the total number of times we call snap())
At most 5 * 104 calls will be made to set, snap, and get.
*/


typedef pair<int,int> pii;
class SnapshotArray {
    int n = 0;
    vector<vector<pii>> m;
public:
    SnapshotArray(int length) {
         m = vector<vector<pii>>(length, vector<pii>(1, {0 , 0})); // every element is 0 in beginning
}
    
    void set(int index, int val) {
        int x = m[index].size();
    
    if(m[index][x-1].second == n)   // if no new snaps were taken after last entry
        m[index][x-1].first = val;  // then update the last entry
    else 
        m[index].push_back({val , n});      
    }
    
    int snap() {
        n++;
    return n-1;
    }
    
    int get(int index, int snap_id) {
        
    int l = 0, h = m[index].size()-1;
    
    while(l <= h){                 // binary search for first index with snap_id equal or lower
        
        int mid = l+(h-l)/2;
        
        if(m[index][mid].second == snap_id)
            return m[index][mid].first;
        else if(m[index][mid].second > snap_id)
            h = mid-1;
        else 
            l = mid+1;
        
    }
    
    return m[index][h].first;
    }
};

/**
 * Your SnapshotArray object will be instantiated and called as such:
 * SnapshotArray* obj = new SnapshotArray(length);
 * obj->set(index,val);
 * int param_2 = obj->snap();
 * int param_3 = obj->get(index,snap_id);
 */
