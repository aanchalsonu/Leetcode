/*

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, 
and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

*/

class Solution {
public:

    vector<vector<int>> threeSum(vector<int>& nums) {
        int i,n;
        vector<vector<int>> res;
        set<vector<int>> s;
        sort(nums.begin(),nums.end());
        n = nums.size();
        for(i=0;i<n-2;i++)
        {
            int low= i+1,high= n-1;
            while(low<high)
            {
                if(nums[i] + nums[low] + nums[high] < 0)
                {
                    low++;
                }
                else if(nums[i] + nums[low] + nums[high] > 0)
                {
                    high--;
                }
                else
                {
                    s.insert({nums[i],nums[low],nums[high]});
                    low++;
                    high--;
                }
            }

        }
            for(auto itr : s)
        {
            res.push_back(itr);
        }
        return res;

    }



    // FIRST APPROACH WITH O(N^2) COMPLEXITY

    
    // vector<vector<int>> threeSum(vector<int>& nums) {
    //     int j,k,i,n;
    //     int sum=0;
    //     vector<vector<int>> res;
    //     set<vector<int>> s;
    //     sort(nums.begin(),nums.end());
    //     n = nums.size();
    //     for(i=0;i<n-2;i++)
    //     {
    //         // sum = nums[i];
    //         for(j=i+1;j<n-1;j++)
    //         {
    //             // sum += nums[j];
    //             for(k=j+1;k<n;k++)
    //             {
    //                 // sum = sum + nums[k];
    //                 if(nums[i]+ nums[j] + nums[k] == 0 && i!= j && i!= k && j!= k)
    //                 {
    //                     s.insert({nums[i], nums[j],nums[k]});
    //                 }
    //             }
    //         }
    //     }

    //     for(auto itr : s)
    //     {
    //         res.push_back(itr);
    //     }
    //     return res;
    // }
};
