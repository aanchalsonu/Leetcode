Problem statement
You are given an array 'A' of length 'N' and integers 'start' and 'end'.
In one operation, you can multiply 'start' by any element of 'A' and take modulo with ‘mod’. In this problem, 'mod' is 10^3.



Return the minimum number of operations required to make 'start' equal to 'end'. If it is not possible, then return -1.



For Example:
'N' = 3, 'A' = [2, 5, 7], 'start' = 3, 'end' = 30.
Multiply 'start' with 2, start = 6 % 'mod' = 6.
Multiply 'start' with 5, start = 30 % 'mod' = 30.
So our answer is 2.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
2 1 12
3 2
Sample Output 1:
3
Explanation of sample output 1:
Multiply 'start' with 2, start = 2 % 'mod' = 2.
Multiply 'start' with 2, start = 4 % 'mod' = 4.
Multiply 'start' with 3, start = 12 % 'mod' = 12.
So our answer is 3
Sample Input 2:
4 8 320
4 6 1 10
Sample Output 2:
2

Constraints:
1 <= 'N' <= 10^3.
1 <= 'start', 'end' < 10^3
1 <= 'A[i]' <= 10^5.
Time Limit: 1 sec





int minimumOperations(int n, int start, int end, vector<int> &a)
{
    // Write your code here
    int mod=1e3;

    unordered_map<int,int>mp;

    mp[start]=0;

    queue<pair<int,int>>q;

    q.push({start,0});

    while(!q.empty()){

        int curr = q.front().first;

        int steps = q.front().second;

        if(curr==end)return steps;

        q.pop();

        for(int i=0;i<n;i++){

            int pro = (curr*a[i])%mod;

            if(mp.find(pro)==mp.end()){

                mp[pro]=1+steps;

                q.push({pro,steps+1});

            }

        }

    }

    return -1;
}
