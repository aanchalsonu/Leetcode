/*

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

*/


class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int i,j,r,c;
        vector<set<int>> row(9),col(9),block(9);
        for(i=0;i<9;i++)
        {
            for(j=0;j<9;j++)
            {
                if(board[i][j] == '.')
                continue;

                int curr = board[i][j]-'0';
                if(row[i].count(curr) || col[j].count(curr) || block[(i/3)*3 + j/3].count(curr))
                return false;

                row[i].insert(curr);
                col[j].insert(curr);
                block[(i/3)*3 +j/3].insert(curr);

            }
        }
        
        return true;



        // for(i=0;i<9;i = i+3)
        // {
        //     for(j=0;j<9;j=j+3)
        //     {
        //         map<int,int> mp;
        //         for(r=0;r<3;r++)
        //         {
        //             for(c=0;c<3;c++)
        //             {
        //                 mp[board[i+r][j+c]]++;
        //                 if(mp[board[i+r][j+c]] > 1)
        //                 return false;
        //             }
        //         }

        //         // while(r<3 && c<3)
        //         // {
        //         //     mp[board[i+r][j+c]]++;
        //         //     if(mp[board[i+r][j+c]] > 1)
        //         //     return false;
        //         //     r++;
        //         // }
        //     }
        // }
        // return true;
    }
};
