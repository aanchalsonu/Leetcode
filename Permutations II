/*

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10
*/


class Solution {
public:

    void solve(vector<int> nums, int index,vector<vector<int>> &ans)
    {
        if(index >= nums.size())
        {
            ans.push_back(nums);
            return ;
        }

        for(int i=index;i<nums.size();i++)
        {
            swap(nums[i],nums[index]);
            solve(nums,index+1,ans);
            //backtracking
            swap(nums[i], nums[index]);
        }
    }


  vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> ans,unique;
        
        map<vector<int>,int> mp;
        int index=0;
        solve(nums,index,ans);

        for(int i=0;i<ans.size();i++)
        {
            mp[ans[i]]++;
        }

        for(auto it : mp)
        {
            unique.push_back(it.first);
        }
        return unique;
    }
};
