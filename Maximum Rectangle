/*
Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1

*/

class Solution {
public:

        //USE HISTOGRAM LOGIC
    vector<int> nextsmall(vector<int> &height,int n)
    {
        stack<int> s;
        s.push(-1);
        vector<int> res(n);

        for(int i=n-1;i>=0;i--)
        {
            int curr = height[i];
            while(s.top() != -1 && height[s.top()] >= curr)
            {
                s.pop();
            }
            res[i] = (s.top());
            s.push(i);            
        }
        return res;
    }

    vector<int> previous(vector<int> &height,int n)
    {
        stack<int> s;
        s.push(-1);
        vector<int> res(n);

        for(int i=0;i<n;i++)
        {
            int curr = height[i];
            while(s.top() != -1 && height[s.top()] >= curr)
            {
                s.pop();
            }
            res[i] = (s.top());
            s.push(i);            
        }
        return res;
    }


    int histogram(vector<int> &height, int m)
    {
        int area=0;
        vector<int> prev(m);
        vector<int> next(m);

        prev = previous(height,m);
        next = nextsmall(height,m);

        for(int i=0;i<m;i++)
        {
            if(next[i] == -1)
            next[i] = m;

            int b = next[i]-prev[i]-1;
            area = max(area,(height[i]*b));
        }
        return area;
    }
    
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        int maxi = 0;
        if(matrix.empty())
        return 0;

        vector<int> height(m,0);

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j] == '0')
                height[j]=0;
                else
                height[j]++;
            }
            maxi = max(maxi,histogram(height,m));
        }
        return maxi;
    }
};
