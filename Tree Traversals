Problem statement


Given a integer N represents a tree of n nodes return a 2D array 
containing inorder, pre order and post order traversals 



Sample Input 1 :
1 2 3 -1 -1 -1  6 -1 -1
Sample Output 1 :
2 1 3 6 
1 2 3 6 
2 6 3 1
Explanation of Sample Output 1 :
 The given binary tree is shown below:

Inorder traversal of given tree = [2, 1, 3, 6]
Preorder traversal of given tree = [1, 2, 3, 6]
Postorder traversal of given tree = [2, 6, 3, 1]
Sample Input 2 :
1 2 4 5 3 -1 -1 -1 -1 -1 -1
Sample Output 2 :
5 2 3 1 4 
1 2 5 3 4 
5 3 2 4 1
Explanation of Sample Output 2 :
The given binary tree is shown below:

Inorder traversal of given tree = [5, 2, 3, 1, 4]
Preorder traversal of given tree = [1, 2, 5, 3, 4]
Postorder traversal of given tree = [5, 3, 2, 4, 1]
Constraints :
1 <= 'N' <= 10^5
0 <= 'data' <= 10^5     

where 'N' is the number of nodes and 'data' denotes the node value of the binary tree nodes.

Time limit: 1 sec


/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left),
   right(right) {}
    };
*/

void inorder(TreeNode *root, vector<int> & inord)
{
    if(root)
    {
        inorder(root->left,inord);
        inord.push_back(root->data);
        inorder(root->right,inord);
    }
    else
    return;
}


void preorder(TreeNode *root, vector<int> & pre)
{
    if(root)
    {
        pre.push_back(root->data);
        preorder(root->left,pre);
        preorder(root->right,pre);
    }
    else
    return;
}


void postorder(TreeNode *root, vector<int> & post)
{
    if(root)
    {
        postorder(root->left,post);
        postorder(root->right,post);
        post.push_back(root->data);
    }
    else
    return;
}


vector<vector<int>> getTreeTraversal(TreeNode *root){
    // Write your code here.
    vector<vector<int>> res;
    vector<int> inord, pre,post;

    inorder(root,inord);
    preorder(root,pre);
    postorder(root,post);

    res.push_back(inord);
    res.push_back(pre);
    res.push_back(post);

    return res;
}
