/*
Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just 
like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 6000].
-100 <= Node.val <= 100

*/

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        //Maintain a queue to find the right node
        queue<Node *> q;

        //push the root node to the queue and start the process
        if(root)
        q.push(root);

        int l;
        while(!q.empty())
        {
            l = q.size();
            for(int i=0;i<l;i++)
            {
                //here the node on the front of the queue will be the rightmost node if the pointer i is not pointing to the end of the queue 
length. else it will be NULL, indicating that it is the rightmost node on the given level
                
                auto temp = q.front();
                q.pop();

                if(temp->left)
                q.push(temp->left);
                if(temp->right)
                q.push(temp->right);

                if(i==l-1)
                temp->next = NULL;
                else
                temp->next = q.front();

            }
        }

        return root;
    }
};
 
