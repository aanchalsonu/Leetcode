/*

Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:

i - k <= r <= i + k,
j - k <= c <= j + k, and
(r, c) is a valid position in the matrix.
 

Example 1:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]
Example 2:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]

*/

class Solution {
public:

    /*
    1. Create a 2D vector sum of size (row+1) x (col+1) and initialize all elements to 0.

2. Compute the prefix sum of the input matrix mat and store the results in sum using the formula:

    sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1]

3. Create a 2D vector ans of size row x col and initialize all elements to 0.

4. For each element ans[i][j] in the output matrix:

    Compute the coordinates of the submatrix to sum over using the variables x1, y1, x2, and y2, where:

    x1 = max(0, i-k)
    y1 = max(0, j-k)
    x2 = min(row, i+k+1)
    y2 = min(col, j+k+1)

5. Compute the sum of the submatrix using the prefix sum stored in sum and store the result in ans[i][j] using the formula:

    ans[i][j] = sum[x2][y2] - sum[x1][y2] - sum[x2][y1] + sum[x1][y1]
Return the output matrix ans.

*/

    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int row = mat.size();
        int col = mat[0].size();
        
        // Create a 2D vector to store the prefix sum
        vector<vector<int>> sum(row+1, vector<int>(col+1, 0));

        // Compute prefix sum
        for(int i=1; i<=row; i++) {
            for(int j=1; j<=col; j++) {
                // Compute the sum of the submatrix from (0, 0) to (i-1, j-1)
                sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];
            }
        }

        // Compute answer
        vector<vector<int>> ans(row, vector<int>(col, 0));
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                // Compute the coordinates of the submatrix
                int x1 = max(0, i-k);
                int y1 = max(0, j-k);
                int x2 = min(row, i+k+1);
                int y2 = min(col, j+k+1);

                // Compute the sum of the submatrix using the prefix sum
                ans[i][j] = sum[x2][y2] - sum[x1][y2] - sum[x2][y1] + sum[x1][y1];
            }
        }

        return ans;
    }
};
