Problem Statement



Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
7 3
1 1 1 2 2 3 3


Sample Output 1:
2


Explanation For Sample Input 1:
In the given list, there are 2 occurrences of integer 3.


Sample Input 2:
 5 6
 1 2 4 4 5


Sample Output 2:
 0


Explanation For Sample Input 2:
In the given list, there are 0 occurrences of integer 6.


Expected Time Complexity:
The expected time complexity is O(log 'n').


Constraints:
1 <= n <= 10^4
1 <= arr[i] <= 10^9
1 <= x <= 10^9
Where arr[i] represents the element i-th element in the array/list.

Time Limit: 1sec



#include<bits/stdc++.h>
int count(vector<int>& arr, int n, int x) {
	// Write Your Code Here
	// unordered_map<int,int> mp;
	// for(int i=0;i<n;i++)
	// {
	// 	mp[arr[i]]++;
	// }
	// return mp[x];


	int lb = lower_bound(arr.begin(),arr.end(),x)-arr.begin();
	int ub = upper_bound(arr.begin(),arr.end(),x)-arr.begin();
	return ub-lb;
}


  UPPER BOUND FUNCTION RETURN THE FIRST OCCURENCES OF THE NUMBER FROM THE ARRAY AND THE UPPER BOUND RETURNS THE LAST OCCURENCES OF 
THE ARRAY SO THE DIFFERENCES BETWEEN THEM WILL GIVE THE NUMBER OF TIMES THE NUMBER HAS OCCURED.
