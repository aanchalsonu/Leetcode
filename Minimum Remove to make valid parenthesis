/*

Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses
string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.

*/


class Solution {
public:
    string minRemoveToMakeValid(string s) {
        stack<pair<char,int>> st;
        int i;
        int n= s.length();
        for(int i=0;i<n;i++){
            if(s[i]=='('){
                st.push({s[i],i});
            }else if(s[i]==')') {
                if(!st.empty()&&st.top().first=='('){
                    st.pop();
                }else{
                    st.push({s[i],i});
                }
            }
        }
        while(!st.empty()){
            int top = st.top().second;
            s.erase(s.begin()+top);
            st.pop();
        }
        return s;




        // for(i=0;i<n;i++)
        // {
        //     if(s[i] == '(')
        //     st.push({s[i],i});
        //     else if(!st.empty() && st.top().first == '(')
        //     st.pop();
        //     else
        //     st.push({s[i],i});
        // }

        // while(!st.empty())
        // {
        //     int top = st.top().second;
        //     s.erase(s.begin()+top);
        //     st.pop();
        // }
        // return s;
    }
};
