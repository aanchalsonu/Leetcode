/*

Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment n - 1 elements of the array by 1.

 

Example 1:

Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
Example 2:

Input: nums = [1,1,1]
Output: 0
 

Constraints:

n == nums.length
1 <= nums.length <= 105
-109 <= nums[i] <= 109
The answer is guaranteed to fit in a 32-bit integer.

*/


class Solution {
public:
    /*
        THE LOGIC HERE IS THAT , THE NUMBER OF MOVES WILL BE THE SUM OF DIFFERENCES BETWEEN THE NUMBER AND THE MINIMUM NUMBER FROM THE ARRAY.
        SO FIRST FIND OUT THE MINIMUM NUMBER FROM THE ARRAY, AND THEN 
        KEEP ADDING THE DIFFERENCE BETWEEN THE CURRENT NUMBER AND THE MINIMUM NUMBER WHICH WILL BE THE ANSWER 
        RETURN IT
    */
    int minMoves(vector<int>& nums) {
        int m = INT_MAX;
        for(int i : nums)
        {
            m = min(m,i);
        }
        int ans=0;
        for(int n: nums)
        {
            ans += n-m;
        }
        return ans;
    }
};
