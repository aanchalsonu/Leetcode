Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return 
an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.





class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {

        int n = intervals.size();
        sort(intervals.begin(),intervals.end());

        vector<vector<int>> ans;
        for(auto i: intervals)
        {
            if(ans.empty() || ans.back()[1] < i[0])
            {
                ans.push_back(i);
            }
            else
            {
                ans.back()[1] = max(ans.back()[1] , i[1]);
            }
        }

        return ans;


      APPROACH 2
       vector<vector<int>> merge(vector<vector<int>>& intervals) {
        // Sort the intervals based on the start value
        sort(intervals.begin(), intervals.end());

        vector<vector<int>> res;
        res.push_back(intervals[0]);

        int n = intervals.size();

        for (int i = 1; i < n; i++) {
            int currentStart = intervals[i][0];
            int currentEnd = intervals[i][1];
            int lastEnd = res.back()[1];

            if (currentStart <= lastEnd) {
                // Merge the intervals
                res.back()[1] = max(lastEnd, currentEnd);
            } else {
                // Add the non-overlapping interval to the result
                res.push_back(intervals[i]);
            }
        }

        return res;
    }




        // vector<vector<int>> ans;
        // for(int i=0;i<intervals.size();)
        // {
        //     vector<int> temp;
        //     if(intervals[i][1]>= intervals[i+1][0])
        //     {
        //         temp.push_back(intervals[i][0]);
        //         temp.push_back(intervals[i+1][1]);
        //         i=i+2;
        //     }
        //     else
        //     {
        //         temp.push_back(intervals[i][0]);
        //         temp.push_back(intervals[i][1]);
        //         i++;
        //     }

        //     ans.push_back(temp);
        // }
        // return ans;
    }
};
