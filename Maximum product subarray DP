/*

Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

*/

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        int i,ans,j;
        int maxi = 1;
        int mini = 1;
        ans = INT_MIN;
        for(i=0;i<n;i++)
        {
            if(nums[i] < 0)
            {
                //here swapping is done to check if anhy negative values when multiplied gives a higher product value than the current maximum value
                //else continue with the procedure
                swap(maxi,mini);
            }
            maxi = max(maxi*nums[i], nums[i]);
            mini = min(mini*nums[i],nums[i]);
            ans = max(maxi,ans);
        }
        return ans;




         APPROACH 2
         nt maxi=INT_MIN;
        int mul=1;
        int n = nums.size();

        for(int i=0;i<n;i++)
        {
            mul = mul * nums[i];
            maxi = max(maxi,mul);
            if(mul == 0)
            mul=1;
        }
        mul=1;
        for(int i= n-1;i>=0;i--)
        {
            mul = mul * nums[i];
            maxi = max(maxi,mul);
            if(mul == 0)
            mul=1;
        }
        return maxi;





        //TIME LIMIT EXCEED
        // int ans=1,i,n,maxi=INT_MIN,j;
        // n = nums.size();
        // for(i=0;i<n;i++)
        // {
        //     ans =1;
        //     for(j=i;j<n;j++)
        //     {
        //         ans = ans * nums[j];
        //         if(ans > maxi)
        //         maxi = ans;
        //     }


        //     // ans = ans * nums[i];
        //     // maxi = max(maxi,ans);
        //     // if(maxi < ans|| maxi == 0 )
        //     // ans=1;
        // }
        // return maxi;
        
    }
};
