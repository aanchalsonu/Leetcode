/*

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 
 */
 
 class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
       
       
       int first,last,k;
       first=-1;
       last=-1;
       k=0;
       int n = nums.size();

       for(int i=0;i<n;i++)
       {
           if(nums[i] != target)
           {
               continue;
           }
           else if(first == -1)
           {
               first=i;
               last=i;
           }
           else
           {
               last = i;
           }
       }
       if(first != -1)
       return {first,last};
       else
       return {-1,-1};
       
       /*
            ANOTHER APROACH IS WHERE ONE FOR LOOP WILL LOOP FROM 0 TO N-1 TO FIND THE FIRST POSITION OF THE TARGET AND WHEN IT GETS IT WILL STORE IT INTO THE STARTING POSITION VARIABLE AND COME OUT OF THE LOOP

            NOW THE NEXT LOOP WILL RUN FROM N-1 TO 0 WHICH WILL FIND THE LAST OCCURENCE OF THE VARIABLE AND STORE IT INTO THE VARIABLE, NOW JUST RETURN THE VECTOR OF START AND LAST POSITION OF THE OCCURENCE OF THE ELEMENT
             

       
       */

       
       
        // int i=0,j = nums.size()-1,flag=0,mid;
        // vector<int> res;

        // while(i<=j)
        // {
        //     mid = (i+j)/2;
        //     if(nums[mid] == target && nums[mid-1] != target)
        //     {
        //         res.push_back()
        //     }
        // }









        // int i=0,f=0;
        // int n= nums.size();
        // if(n == 1 && nums[0] == target)
        // {
        //     res.push_back(i);
        //     res.push_back(i);
        // }else if( n==1 && nums[0] != target)
        // {
        //     res.push_back(-1);
        //     res.push_back(-1);
        // }
        // else
        // {
        //     for(i=0;i<n;i++)
        // {
        //     if(nums[i] == target)
        //     {
        //         res.push_back(i);
        //         while(nums[i] == target && i < n)
        //         {
        //             i++;
        //         }
        //         res.push_back(i-1);
        //         f=1;
        //         break;
        //     }
        // }

        // if(f == 0)
        // {
        //     res.push_back(-1);
        //     res.push_back(-1);
        // }

        // }
        
        // return res;

    }
};
