Problem Statement




Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
2 3 4 1


Sample Output 1:
3   


Explanation Of Sample Output 1:
If we right rotate the array {1, 2, 3, 4} by '3' times then we will get {2, 3, 4, 1}. Thus 'r' = 3.


Sample Input 2:
3
1 2 3


Sample Output 2:
0


Explanation Of Sample Output 2:
If we right rotate the array {1, 2, 3} by '0' time then we will get {1, 2, 3}. Thus 'r' = 0.


Expected Time Complexity:
Can you solve this in O(logn) time complexity?


Constraints:
1 <= ‘n’ <= 10^5    
1 <= ‘arr[i]’ <= 10^9
Time Limit: 1 sec


int findKRotation(vector<int> &arr){
    // Write your code here.

    int n = arr.size();
    // vector<int> temp = arr;

    // for(int i=0;i<n;i++)
    // {
    //     if(temp[0] == arr[i])
    //     return i;
    // }
    // return -1;

    int l=0, h = n-1;
    while(l<h)
    {
        int m = (l+h)/2;

        if(arr[m] > arr[h])
        l = m+1;
        else
        h = m;
    }

    return l;
}
