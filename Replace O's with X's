/*
Given a matrix mat of size N x M where every element is either O or X.
Replace all O with X that are surrounded by X.
A O (or a set of O) is considered to be surrounded by X if there are X at locations just below, just above, just left and just right of it.

Example 1:

Input: n = 5, m = 4
mat = {{'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: ans = {{'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'O', 'O'}}
Explanation: Following the rule the above 
matrix is the resultant matrix. 

THE MAIN LOGIC IS , IF O'S ARE PRESENT AT THE BOUNDRY THEN NO NEED TO CHANGE
DO DFS TRAVERSAL FOR ALL THE O'S THAT ARE AT THE BOUNDARIES AND REPLACE THEM WITH A CHARACTER SO THAT THERE IS NO NEED TO CHANGE THEM TO X'S

NOW TRAVERSE THROUGH THE MATRIX AND REPLACE O'S TO X AND THE SPECIAL CAHRACTER TO O
RETURN THE MATRIX 
'
*/

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:


    void dfs(vector<vector<char>> &mat,int n, int m, int i, int j)
    {
        if(i<0 || i>(n-1) || j<0 || j>(m-1) || mat[i][j] == 'X')
        return;
        
        if(mat[i][j] == 'O')
        {
            mat[i][j] = '$';
            dfs(mat,n,m,i+1,j);
            dfs(mat,n,m,i,j+1);
            dfs(mat,n,m,i-1,j);
            dfs(mat,n,m,i,j-1);
        }
    }

    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        // code here
        int i,j;
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(i ==0 || i== n-1 || j==0 || j== m-1)
                {
                    dfs(mat,n,m,i,j);
                }
            }
        }
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(mat[i][j] == 'O')
                {
                    mat[i][j] = 'X';
                }
                else if(mat[i][j] == '$')
                mat[i][j] = 'O';
            }
        }
        return mat;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n, m;
        cin>>n>>m;
        vector<vector<char>> mat(n, vector<char>(m, '.'));
        for(int i = 0;i < n;i++)
            for(int j=0; j<m; j++)
                cin>>mat[i][j];
        
        Solution ob;
        vector<vector<char>> ans = ob.fill(n, m, mat);
        for(int i = 0;i < n;i++) {
            for(int j = 0;j < m;j++) {
                cout<<ans[i][j]<<" ";
            }
            cout<<"\n";
        }
    }
    return 0;
}
// } Driver Code Ends
