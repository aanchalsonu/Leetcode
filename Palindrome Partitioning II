Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
.

Return the minimum cuts needed for a palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
Example 2:

Input: s = "a"
Output: 0
Example 3:

Input: s = "ab"
Output: 1







class Solution {
public:
    // bool isPalin(string s,int i,int j)
    // {
    //     while(i<j)
    //     {
    //         if(s[i]!=s[j])
    //         return false;
    //         i++;
    //         j--;
    //     }
    //     return true;
    // }

    // int solve(string s ,int i,int n,vector<int> &dp)
    // {
    //     if(i>n)
    //     return 0;

    //     if(dp[i] != -1)
    //     return dp[i];

    //     int mini = INT_MAX;
    //     for(int j = i;j<n;j++)
    //     {
    //         if(isPalin(s,i,j))
    //         {
    //             int cost = 1 + solve(s,j,n,dp);
    //             mini = min(mini,cost);
    //         }
            
    //     }
    //     dp[i] = mini;
    //     return dp[i];
    // }


bool isPalindrome(int i, int j, string &s) {
    while (i < j) {
        if (s[i] != s[j]) return false;
        i++;
        j--;
    }
    return true;
}


int f(int i, int n, string &str, vector<int> &dp) {
    //Base case:
    if (i == n) return 0;

    if (dp[i] != -1) return dp[i];
    int minCost = INT_MAX;
    //string[i...j]
    for (int j = i; j < n; j++) {
        if (isPalindrome(i, j, str)) {
            int cost = 1 + f(j + 1, n, str, dp);
            minCost = min(minCost, cost);
        }
    }
    return dp[i] = minCost;
}
    int minCut(string s) {
        int n = s.length();
        vector<int> dp(n,-1);
        
        return f(0,n,s,dp)-1;
    }
};
