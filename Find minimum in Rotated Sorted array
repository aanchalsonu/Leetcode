/*
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times.

*/

class Solution {
public:
    int findMin(vector<int>& nums) {
        int i,j,m;
        int n = nums.size();
        i=0;
        j=n-1;

        /*
            TWO CASES ARE POSSIBLE 
            1. WHEN NUMBER AT I IS LESS THAN THE NUMBER AT J , WHIC MEANS THE ARRAY IS SORTED AND THE MINIMUM VALUE WILL BE NUMS[I];
            2.WHEN NUMBER AT NUMS[J] IS LESS THAN THE NUMBER AT NUMS[I];
            THEN THE MINIMUM NUMBER LIES BETWEEN THE RANGE IF I AND J INCLUSIVELY 
            SO JUST INCREASE THE I VALUE BY 1 AND MINIMUM WILL BE NUMS[J]

        */
        int mini = INT_MAX;
        if(n == 1)
        return nums[0];

        while(i<j)
        {
            if(nums[i] < nums[j])
            {
                mini = nums[i];
                j--;
            }
            else
            {
                mini = nums[j];
                i++;
            }



            // int mid = (j+i)/2;
            // if(nums[mid] == nums[i] && nums[mid] == nums[j])
            // {
            //     mini = nums[mid];
            //     break;
            // }
            // else if(nums[mid] >= nums[i])
            // {
            //     if(nums[mid] >= nums[j])
            //     i = mid+1;
            //     else
            //     j = mid;
            // }
            
        }

        return mini;
    }
};
