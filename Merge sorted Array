/*
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 
and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, 
where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 */
 
 
 class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i,j,t,k,l,r;
        if(m==0 && n>0)
        {
            for(i=0;i<n;i++)
            nums1[i] = nums2[i];
        }
        else if(n==0){

        }
        else
        {
            i = m+n-1;
            l = m-1;
            r = n-1;
            while((l>=0 && r>=0) && i >=0)
            {
                if(nums1[l] > nums2[r])
                {
                    nums1[i--] = nums1[l--];
                }
                else
                {
                    nums1[i--] = nums2[r--];
                }

            }
            if(l<0)
            for(k=0;k<=i;k++)
            {
                nums1[k] = nums2[k];
            }
        }



        // for(i=0,j=m;i<(m) && j <(n);)
        // {
        //     if(nums1[i] < nums2[j] && nums1[i] != 0)
        //     {
        //         i++;
        //     }
        //     else if(nums2[j] < nums1[i] && nums1[i] != 0)
        //     {
        //         t = nums2[j];
        //         nums2[j] = nums1[i];
        //         nums1[i] = t;
        //         i++;
        //         j++;
        //     }
        // }
    }
}
