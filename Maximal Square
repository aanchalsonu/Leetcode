/*

Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4
Example 2:


Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0

*/


class Solution {
public:


int solve(int i,int j,int n,int m ,vector<vector<char>>& matrix)
{
    if(i>=n || j >= m || matrix[i][j] == '0')
    return 0;

    if(dp[i][j] != -1)
    return dp[i][j];

    int right = 1 + solve(i,j+1,n,m,matrix);
    int down = 1 + solve(i+1,j,n,m,matrix);
    int diagonal = 1 + solve(i+1,j+1,n,m,matrix);

    return dp[i][j] = min(right, min(down,diagonal));
}


int dp[301][301];
    int maximalSquare(vector<vector<char>>& matrix) {
        int i,j,n,m,ans;
        n = matrix.size();
        m = matrix[0].size();

        //COPIES SINGLE ELEMENT NUMBER OF TIMES
        memset(dp,-1,sizeof(dp));

        ans = 0;
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(matrix[i][j] == '1')
                ans = max(ans,solve(i,j,n,m,matrix));
            }
        }
        return ans*ans;
    }
};
