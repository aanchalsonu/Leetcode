/*

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only 
constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically 
contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.

*/

class Solution {
public:

    // int solve(int i,vector<int>& nums,int &ans,vector<int> &dp)
    // {
        
        // if(i> nums.size())
        // return 0;

        // if(dp[i] != -1)
        // return dp[i];

        // ans += max(solve(i,nums,ans,dp), solve(i+2,nums,ans,dp));
        // return dp[i] = ans;



        // if(ei>nums.size() || oi>nums.size())
        // return 0;

        // if(dp[ei] != -1)
        // return dp[ei];

        // if(dp[oi] != -1)
        // return dp[oi];

        // int e=0,o=0;
        // e += solve(ei+2,oi,nums,ans,dp);
        // o += solve(ei,oi+2,nums,ans,dp);

        // dp[ei] = e;
        // dp[oi] = o;

        // ans += max(e,o);
        // return ans;

    // }


    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,-1);

        //Tabulation method
        // Basic Cases

        if(n==0)
        return 0;

        if(n==1)
        return nums[0];

        if(n==2)
        return max(nums[0],nums[1]);
    

        //Fill the dp
        dp[0] = nums[0];
        dp[1] = max(nums[0],nums[1]);

        //now check wheather to go with even indexes or odd indexes
        for(int i=2;i<n;i++)
        {
            //if current value of nums plus the previous even or odd index is max then we'll  go with even indices or we'll  go with odd
            dp[i] = max(nums[i] + dp[i-2] , dp[i-1]);
        }
        return dp[n-1];
    }
};
