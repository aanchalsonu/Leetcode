/*
Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
Your Task:
You just have to complete the function maxLen() which takes two arguments an array A and n, where n is the
size of the array A and returns the length of the largest subarray with 0 sum.

*/

//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
/*You are required to complete this function*/

class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        unordered_map<int,int> mp;

//TO STORE SUM AND ITS CORRESPONDING INDEX
//THE ANS WILL STORE MAXIMUM INDEX DIFFERNCE IE: CURRENT INDEX WHERE THE SAME SUM IS FOUND MINUS THE INDEX STORED IN THE MAP
        
        int sum=0;
        mp[0] = -1;
        int ans =0;
        for(int i=0;i<n;i++)
        {
            sum += A[i];
            if(mp.find(sum) != mp.end())
            {
                ans = max(ans,i-mp[sum]); // ANSWER CALCULATION 
            }
            else
            {
                mp.insert({sum,i});
            }
        }
        
        return ans;
    }
};


//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int m;
        cin>>m;
        vector<int> array1(m);
        for (int i = 0; i < m; ++i){
            cin>>array1[i];
        }
        Solution ob;
        cout<<ob.maxLen(array1,m)<<endl;
    }
    return 0; 
}



// } Driver Code Ends
