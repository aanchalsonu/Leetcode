/*

Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 
 
 */
 
 class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int i,j,count=0,sum=0;
        int n = nums.size();
        unordered_map<int,int> mp;
        mp[sum]=1;
        for(auto itr : nums)
        {
            sum += itr;
            int x = sum-k;
            if(mp.find(x) != mp.end())
            {
                count += mp[x];
            }
            mp[sum]++;
        }
        return count;







        // for(i=0;i<n;i++)
        // {
        //     sum=0;
        //     for(j=i+1;j<n;j++)
        //     {
        //         sum = sum + nums[j];
        //         if(sum == k)
        //         {
        //             count++;
        //             sum=0;
        //             break;
        //         }
        //     }
            // sum = sum + nums[i];
            // if(sum == k)
            // {
            //     count++;
            //     sum=0;
            // }
            // if(sum <0)
            // sum = 0;
        // }
        return count;
    }
};
