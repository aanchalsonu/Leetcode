
Problem Statement


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
7 3
1 2 3 1 1 1 1


Sample Output 1 :
3


Explanation Of Sample Input 1 :
Subarrays whose sum = ‘3’ are:
[1, 2], [3], [1, 1, 1] and [1, 1, 1]
Here, the length of the longest subarray is 3, which is our final answer.


Sample Input 2 :
4 2
1 2 1 3


Sample Output 2 :
1


Sample Input 3 :
5 2
2 2 4 1 2 


Sample Output 3 :
1


Expected Time Complexity :
The expected time complexity is O(n).


Constraints :
1 <= 'n', 'k' <= 10 ^ 3
0 <= 'a[i]' <= 10 ^ 9

Time Limit: 1-second















int longestSubarrayWithSumK(vector<int> a, long long k) {
    // Write your code here
    int ans=0;
    int first = 1,second=0,sum=0;

    sum = a[0];
    while(first<a.size())
    {
        sum += a[first];
        while(second<=first && sum>k)
        {
            sum -= a[second];
            second++;
        }

        if(sum == k)
        ans = max(ans,first-second+1);
        first++;
    }

    return ans;


}
