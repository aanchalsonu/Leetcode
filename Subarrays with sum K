Problem Statement
return the number of subarrays with sum k

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
6 3
1 2 3 1 1 1
Sample Output 1:
3
Explanation Of Sample Input 1:
Input: ‘N’ = 6 ‘K’ = 3
‘A’ = [1, 2, 3, 1, 1, 1]
Output: 3
Explanation: Subarrays whose sum = ‘3’ are:
[1, 2], [3], and [1, 1, 1]
Sample Input 2:
4 2
1 2 1 3
Sample Output 2:
1
Sample Input 3:
5 16
9 5 6 5 5 
Sample Output 3:
2
Constraints:
1 <= N, K <= 10^3
1 <= A[i] <= 10^9

Time Limit: 1-sec






vector<vector<int>> subarraysWithSumK(vector<int> a, long long k) {

    int i=0,j=0;

    long long sum=0;

    vector<vector<int>>ans;

    vector<int>output;

    while(j<a.size()){

        sum+=a[j];

        output.push_back(a[j]);

        while(i<=j&&sum>k){

            sum-=a[i++];

            auto it = output.begin();

            output.erase(it);

        }

        if(sum==k) ans.push_back(output);

        j++;

    }

    return ans;

}
