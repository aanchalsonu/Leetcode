Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isequal(TreeNode* r1,TreeNode* r2)
    {
        if(!r1 || !r2)
        return r1==r2;

        if(r1->val == r2->val)
        return isequal(r1->left,r2->right) && isequal(r1->right,r2->left);

        return false;
    }

    bool isSymmetric(TreeNode* root) {
        return isequal(root->left,root->right);
    }
};
