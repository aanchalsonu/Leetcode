You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) 
that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.
Example 2:

Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".
Example 3:

Input: num = "35427"
Output: "35427"
Explanation: "35427" is already an odd number.
 

Constraints:

1 <= num.length <= 105
num only consists of digits and does not contain any leading zeros.






class Solution {
public:

    // int convert(string s)
    // {
    //     int res=0;
    //     int i=0;
    //     while(i<s.length())
    //     {
    //         res = res *10 + atoi(s[i])%10;
    //         i++;
    //     }
    //     return res;
    // }


    string largestOddNumber(string num) {
        string ans = "";
        int ind = -1;
        for(int i= num.length()-1;i>=0;i--)
        {
            if((num[i]-'0')%2 != 0 )
            {
                ind = i;
                break;
            }
        }

        if(ind != -1)
        {
            for(int i = 0;i<=ind;i++)
            {
                ans += num[i];
            }
        }

        return ans;







        // long long int n;
        // n = stoi(num);
        // if(n%2 != 0)
        // {
        //     return (string)(num);
        // }
        // int res=-1;

        // for(int i=0;i<num.size();i++)
        // {
        //     int t = stoi(num[i]);
        //     if(t%2 != 0)
        //     {
        //         res = max(res,t);
        //     }
        // }
        // return (string)(res);


    }
};
