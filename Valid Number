/*

A valid number can be split up into these components (in order):

A decimal number or an integer.
(Optional) An 'e' or 'E', followed by an integer.
A decimal number can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
One of the following formats:
One or more digits, followed by a dot '.'.
One or more digits, followed by a dot '.', followed by one or more digits.
A dot '.', followed by one or more digits.
An integer can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
One or more digits.
For example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7",
"+6e-1", "53.5e93", "-123.456e789"], while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"].

Given a string s, return true if s is a valid number.

 

Example 1:

Input: s = "0"
Output: true
Example 2:

Input: s = "e"
Output: false
Example 3:

Input: s = "."
Output: false

*/

/*

FROM FIRST CHECK FOR EACH CONDITION USING IF ELSE CONDITIONS AND HENCE SET THE CORRESPONDING FLAGS
  
*/

class Solution {
public:
    bool isNumber(string s) {
        int n = s.length();
        int i = 0;

        // Skip leading white space
        while (i < n && isspace(s[i])) {
            i++;
        }

        // Check optional sign
        if (i < n && (s[i] == '+' || s[i] == '-')) {
            i++;
        }

        // Check digits before decimal point
        bool hasDigits = false;
        while (i < n && isdigit(s[i])) {
            i++;
            hasDigits = true;
        }

        // Check optional decimal point and digits after it
        if (i < n && s[i] == '.') {
            i++;
            while (i < n && isdigit(s[i])) {
                i++;
                hasDigits = true;
            }
        }

        // Check optional exponent part
        if (hasDigits && i < n && (s[i] == 'e' || s[i] == 'E')) {
            i++;

            // Check optional sign in exponent
            if (i < n && (s[i] == '+' || s[i] == '-')) {
                i++;
            }

            bool hasExponentDigits = false;
            while (i < n && isdigit(s[i])) {
                i++;
                hasExponentDigits = true;
            }

            // The exponent must have at least one digit
            if (!hasExponentDigits) {
                return false;
            }
        }

        // Check trailing white space
        while (i < n && isspace(s[i])) {
            i++;
        }

        // The number is valid if we consumed the entire string and found at least one digit
        return i == n && hasDigits;
    }
};

