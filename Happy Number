/*
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1

*/
class Solution {
public:
    /*
        THE LOGIC HERE IS THAT :
        CALCULATE THE SUM OF SQUARE OF DIGITS IN THE SOLVE FUNCTION AND RETURN THE SUM BACK TO WHERE IT IS CALLED.
        MAINTAIN AN UNORDERED_SET SO THAT NO DUPLICATES ARE ALLOWED.
        IF THE NUMBER REACHES 1 THEN RETURN TRUE.
        IS THE NUMBER DURING CALCULATION IS SOME NUMBER WHICH IS ALLREADY PRESENT IN THE SET , IT MEANS THAT ONE IS NOT
GOING TO BE REACHED AND THE NUMBER IS NOT HAPPY NUMBER. 
        SO JUST RETURN FALSE.

    */
    int solve(int n)
    {
        int sum=0;
        int r;
        bool check=false;

        while(n > 0)
        {
            r = n%10;

            // if(r == 1)
            // check = true;

            sum += (r*r);
            n = n/10;
        }

        // if(check == false)
        // return -1;
        return sum;
    }
    bool isHappy(int n) {
        int i,r,sum=0;
        unordered_set<int> s;
        i=0;
        while(n != 1 && !s.count(n))
        {
            s.insert(n);
            // if(sum == -1)
            // return false;

            n = solve(n);
        }
        return n==1;
    }

};
