Problem statement







Sample Input 1:
1 2 3 4 5 -1 6 -1 7 -1 -1 8 -1 9 -1 -1 11 10 -1 -1 -1 -1 -1


Sample Output 1:
10 4 2 1 3 6


Explanation of Sample Output 1:
The binary tree is:

Consider the vertical lines in the figure. The top view contains the topmost node from each vertical line.
In test case 1,



Sample Input 2:
1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1


Sample Output 2:
8 4 2 1 3 7


Explanation of Sample Output 2:
The binary tree is:

From left to right, the top view of the tree will be [8,4,2,1,3,7], where 9, 5 and 6 will be hidden when we see from the top of the tree.


Expected time complexity :
The expected time complexity is O(n * log(n)).



/************************************************************

    Following is the TreeNode class structure:

    template <typename T>
    class TreeNode
    {
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T dat)
        {
            this->data = dat;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>
vector<int> getTopView(TreeNode<int> *root)
{
    // Write your code here.
    vector<int> ans;

    if(root == NULL)
      return {};

    map<int,int> mp;
    queue<pair<TreeNode<int> *,int>> q;

    q.push({root,0});
    while(!q.empty())
    {
        pair<TreeNode<int> *,int> temp = q.front();
        q.pop();

        TreeNode<int> * frontNode = temp.first;
        int line = temp.second;

        if(mp.find(line) == mp.end())
        mp[line] = frontNode->data;

        if(frontNode->left)
        q.push({frontNode->left,line-1});
        if(frontNode->right)
        q.push({frontNode->right, line+1});

    }


    for(auto i : mp)
    {
        ans.push_back(i.second);

    }

    return ans;






}
