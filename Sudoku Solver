/*
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:


Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],
["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],
[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],
["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],
["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:


Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.


*/


class Solution {
public:
    bool  isSafe(vector<vector<char>>&board,int row,int col,char value,int n){
        for(int i=0;i<n;i++){
            //for row
            if(board[row][i]==value){ // mean for any col of ith row if data is equal to value return false
                return false;
            }

            //for col
            if(board[i][col]==value){ // for any row(ith) with col if data is equal to value return false 
                return false;
            }

            //for 3*3 matrix
            if(board[3*(row/3)+i/3][3*(col/3)+i%3]==value){
                return false;
            }
        }
        return true;
    }
    bool solve(vector<vector<char>>&board){
        //get the size
        int n=board.size();

        for(int row=0;row<n;row++){
            for(int col=0;col<n;col++){
                //This 2 loops are for iterating the matrix
                //in case we found the empty place
                if(board[row][col]=='.'){

                    //we can fill that place with values from 1-9 
                    for(char i='1';i<='9';i++){

                        if(isSafe(board,row,col,i,n))//mean we can place this value here
                        {
                            board[row][col]=i;
                            //now check will this value give the solution
                            bool isSolutionPossible=solve(board);

                            if(isSolutionPossible){
                                return true;
                            }
                            else{
                                //backtrack // mean we cannot find the solution by putting this value at this place
                                board[row][col]='.';
                            }
                        }
                    }
                    return false; // if any of the value form 1-9 could fit in
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        //make another function
        bool possible = solve(board);
        return ;
    }
};
