/*
Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.

 

Example 1:

Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.
Example 2:

Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.
Example 3:

Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].
*/

/*

Store the lengths of the (locally) longest subarrays with a positive and negative product, into posLen and negLen respectively.
If you encounter a zero, reset these lengths.
If you encounter a negative value, swap these lengths.

*/

class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int i,n;
        n = nums.size();
        int maxlen =0;
        int plen = 0;
        int nlen = 0;

        for(i=0;i<n;i++)
        {
            if(nums[i] == 0)
            {
                plen=0;
                nlen=0;
            }
            if(nums[i] < 0)
            {
                swap(plen,nlen);
            }
            if(plen > 0 || nums[i] > 0)
            plen++;
            if(nlen > 0 || nums[i] < 0)
            nlen++;
            maxlen = max(maxlen,plen);
            
        }


        return maxlen;

        // for(i=0;i<n;i++)
        // {
        //     if(nums[i] < 0)
        //     {
        //         swap(maxi,mini);
        //     }
        //     maxi = max(maxi*nums[i] , nums[i]);
        //     mini = min(mini*nums[i] , nums[i]);

        //     ans = min(maxi,ans);
        //     if(ans > 0)
        //     count++;

        // }
    }
};
