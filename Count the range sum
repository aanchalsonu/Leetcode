/*
Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.

Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.

 

Example 1:

Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.
Example 2:

Input: nums = [0], lower = 0, upper = 0
Output: 1
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
-105 <= lower <= upper <= 105
The answer is guaranteed to fit in a 32-bit integer.

*/

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

class Solution {
public:
    tree<long long, null_type, less_equal<long long>, rb_tree_tag, tree_order_statistics_node_update> T//;
//The count of valid ranges is computed by subtracting the order of the prefix sum sum - upper in the T tree from the order of the prefix sum 
//sum - lower + 1 in the T tree. The order_of_key function of the tree class returns the number of elements that are strictly less than the given value.
//
    // lower <= sum[j] - sum[i] <= upper
    // sum[j] - sum[i] >= lower
    // sum[j] - sum[i] <= upper
    // where i < j
    
    // given sum[j], find the number of i such that 
    // 1. i < j 
    // 2. sum[j] - upper <= sum[i] <= sum[j] - lower
    
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        long long sum = 0, ans = 0;
        // normalise as lower <= sum[j] - 0 <= upper
        T.insert(0);
        for (auto x : nums) {
            // prefix sum
            sum += x;
            // count the range
            ans += T.order_of_key(sum - lower + 1) - T.order_of_key(sum - upper);
            // update T
            T.insert(sum);
        }
        return ans;
    }
};
