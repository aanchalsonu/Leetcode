/*

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1,
return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4

*/

class Solution {
public:

/*
Create two arrays called previous Smaller and next smaller which will store the indexes of the next and previous smaller element from that index.

if there is no element then put -1
It can be implemented using stack.
Where in pop the index from stack if the top element is greater then the current value of the iteration.

Now we can find the width of the rectangle by using the previosly generated arrays.
length is the height given and breadth is found by the formula
b = next[i]-prev[i]-1

now find maximum area using a = l*b;

maximum area is the answer */

    vector<int> nextSmaller(vector<int> &arr, int n)
{
    // Write your code here.

    vector<int> ans(n);
    stack<int> s;
    s.push(-1);

    int i;
    
    for(i=n-1;i>=0;i--)
    {
        int curr = arr[i];
        while(s.top() != -1 &&  arr[s.top()] >= curr)
        {
            s.pop();
        }
        ans[i] = s.top();

        s.push(i);
    }
    return ans;
}


     vector<int> prevSmaller(vector<int> &arr, int n)
{
    // Write your code here.

    vector<int> ans(n);
    stack<int> s;
    s.push(-1);

    int i;
    
    for(i=0;i<n;i++)
    {
        int curr = arr[i];
        while(s.top() != -1 &&  arr[s.top()] >= curr)
        {
            s.pop();
        }
        ans[i] = s.top();

        s.push(i);
    }
    return ans;
}


    int largestRectangleArea(vector<int>& heights) {
        int area,newarea,i,j;

        int n = heights.size();

        vector<int> next(n);
        next = nextSmaller(heights,n);

        vector<int> prev;
        prev = prevSmaller(heights,n);

        area = 0;

        for(i=0;i<n;i++)
        {
            int l = heights[i];
            if(next[i] == -1)
            {
                next[i] = n;
            }
            int b = next[i]-prev[i]-1;
            newarea = l*b;
            area = max(area,newarea); 
        }

        return area;
    }
};



