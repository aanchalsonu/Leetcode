Problem Statement




Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
7
1 2
1 7
2
1 13
2
2
2


Sample Output 1:
2 7 13 -1


Explanation Of Sample Input 1 :
After each operation, our queue is equal to the following:
1 2: {2}
1 7: {2, 7}
2: {7} and 2 is printed
1 13: {7, 13}
2: {13} and 7 is printed
2: {} and 13 is printed
2: {} and -1 is printed since the queue is empty.


Sample Input 2 :
4
2
2
1 2
1 4


Sample Output 2 :
-1 -1


Explanation Of Sample Input 2 :
After each operation, our queue is equal to the following:
2: {} and -1 is printed since the queue is empty.
2: {} and -1 is printed since the queue is empty.
1 2: {2}
1 4: {2, 4}


Expected Time Complexity :
Both the enqueue() and dequeue() functions should solve in constant time, that is O(1) time complexity.


Constraints:
1 <= ‘query’ <= 10^5
1 <= ‘e’ <= 10^6

class Queue {

	int front, rear;
	vector<int> arr;

public:
	Queue()
	{
		front = 0;
		rear = 0;
		arr.resize(100001);
	}

	// Enqueue (add) element 'e' at the end of the queue.
	void enqueue(int e)
	{
		// Write your code here.
		
		arr[rear++] = e;
	}

	// Dequeue (retrieve) the element from the front of the queue.
	int dequeue()
	{
		// Write your code here.
		if(front == rear)
		return -1;
		else
		return arr[front++];
	}
};
