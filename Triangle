/*

Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may 
move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104

*/


class Solution {
public:


    int solve(vector<vector<int>>& triangle, int i, int j, int n,vector<vector<int>> &dp) {
        if(i==n-1) return triangle[i][j];
        if(dp[i][j] != -1)
        return dp[i][j];
        int down=triangle[i][j]+solve(triangle,i+1,j,n,dp); //EITHER CONSIDER TRIANGLE[I][J] OR TRIANGLE[I][J+1]
        int diag=triangle[i][j]+solve(triangle,i+1,j+1,n,dp);
        return dp[i][j] = min(down,diag);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return solve(triangle,0,0,n,dp);
        



        // int i=0,j,n,mini=INT_MAX,k;
        // int sum=triangle[0][0];
        // n = triangle.size();
        // j=0;
        // for(i=1;i<n;i++)
        // {
        //     int m = triangle[i].size();
        //     if(j<m-1)
        //     {
        //         mini = min(triangle[i][j],triangle[i][j+1]);
        //         sum += mini;
        //         for(k=0;k<m;k++)
        //         {
        //             if(triangle[i][k] == mini)
        //             {
        //                 j=k;
        //                 break;
        //             }
        //         }
        //     }
        // }
        // return sum;
    }
};
