You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:


Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:

Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 

Constraints:

1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are unique. (i.e., no multiple edges.)




class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int,int>>adj[n+100];
        for(auto x:times){
            adj[x[0]].push_back({x[2],x[1]});
        }
        vector<int>dis(n+10,INT_MAX);
        vector<bool>visited(n+10,false);
        dis[k]=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,k});

        while(!pq.empty()){
            pair<int,int>top=pq.top();
            pq.pop();
            int dinh=top.second;
            if(!visited[dinh]){
                visited[dinh]=true;
                for(auto x:adj[dinh]){
                    int dk=x.second;
                    int w=x.first;
                    if(dis[dk]>dis[dinh]+w){
                        dis[dk]=dis[dinh]+w;
                        pq.push({dis[dk],dk});
                    }
                }
            }
        }
        for(int i=1;i<=n;i++){
            if(!visited[i]) return -1;
        }
        int ans=-1;
        for(auto x:dis){
            if(x!=INT_MAX){
                ans=max(ans,x);
            }
        }
        return ans;

    }
};
