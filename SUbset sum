Problem Statement
Given an array num return the possible sum of all the subsets


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
3
1 2 3
Sample Output 1 :
0 1 2 3 3 4 5 6
Explanation For Sample Output 1:
For the first test case,
Following are the subset sums:
0 (by considering empty subset)
1
2
1+2 = 3
3
1+3 = 4
2+3 = 5
1+2+3 = 6
So, subset-sums are [0,1,2,3,3,4,5,6]
Sample Input 2 :
2 
4 5
Sample Output 2 :
0 4 5 9
Expected Time Complexity:
Try to do this in O(n*2^n). 
Constraints:
1 <= n <= 15
0 <= nums[i] <= 5000

Time limit: 1 sec




void solve(int i,vector<int> op,vector<int> &num,int n,vector<vector<int>> &res)
{
	if(i >= n)
	{
		res.push_back(op);
		return ;
	}

	solve(i+1,op,num,n,res);
	op.push_back(num[i]);
	solve(i+1,op,num,n,res);
}

vector<int> subsetSum(vector<int> &num){
	// Write your code here.

	vector<vector<int>> res;
	vector<int> ans;
	int sum=0;
	int n = num.size();
	vector<int> op;
	solve(0,op,num,n,res);
	for(int i=0;i<res.size();i++)
	{
		sum=0;
		for(int j = 0;j<res[i].size();j++)
		{
			sum += res[i][j];
		}
		ans.push_back(sum);
	}
	sort(ans.begin(),ans.end());
	return ans;
}





OR  


void solve(vector<int> a, int i, int sum, vector<int>& ans){

if(i == a.size()){

ans.push_back(sum);

return;

}

 

solve(a, i+1, sum, ans);

solve(a, i+1, sum+a[i], ans);

}

 

vector<int> subsetSum(vector<int> &num){

vector<int> ans;

 

solve(num, 0, 0, ans);

sort(ans.begin(), ans.end());

return ans;

}

