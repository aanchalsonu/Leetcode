/*

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the
candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

*/

class Solution {
public:
void helper(int idx, vector<int>& candidates, int n, int sum, int target, vector<int>& temp,         vector<vector<int>>& ans) {
        if (sum == target) {
            ans.push_back(temp);
            return;
        }
        for (int i = idx; i < n; i++) {
            if (i != idx &&  candidates[i] == candidates[i-1])
                continue;
            if (sum + candidates[i] > target)
                break;    
            sum += candidates[i];
            temp.push_back(candidates[i]);
            helper(i+1, candidates, n, sum, target, temp, ans);
            sum -= candidates[i];
            temp.pop_back();    
        } 
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int n = candidates.size();
        vector<vector<int>> ans;
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        helper(0, candidates, n, 0, target, temp, ans);
        return ans;
    }
};
