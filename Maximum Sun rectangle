/*
Given a 2D matrix M of dimensions RxC. Find the maximum sum submatrix in it.

Example 1:

Input:
R=4
C=5
M=[[1,2,-1,-4,-20],
[-8,-3,4,2,1],
[3,8,10,1,3],
[-4,-1,1,7,-6]]
Output:
29
Explanation:
The matrix is as follows and the
blue rectangle denotes the maximum sum
rectangle.
Thumbnail
Example 2:

Input:
R=2
C=2
M=[[-1,-2],[-3,-4]]
Output:
-1
Explanation:
Taking only the first cell is the 
optimal choice.
*/

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
  
  
    int kadane(vector<int> ans, int c)
    {
        int sum=0;
        int res=INT_MIN;
        for(int i=0;i<c;i++)
        {
            sum += ans[i];
            if(sum > res)
            res = sum;
            if(sum<0)
            sum=0;
        }
        return res;
    }
  
  
    int maximumSumRectangle(int R, int C, vector<vector<int>> M) {
        // code here
        
        
        int i,j,mx=INT_MIN;
    //FOR EACH ROW ADD THE ELEMENTS TO THE CURRENT SUM , AND SEND THAT TO KADANES FUNCTION TO FIND THE MAXIMUM VALUE,
        for(i=0;i<R;i++)
        {
            vector<int> ans(C);
            for(j=i;j<R;j++)
            {
                for(int col=0;col<C;col++)
                {
                    ans[col] += M[j][col];
                }
                mx = max(mx,kadane(ans,C));
            }
            
        }
        return mx;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, M;
        cin >> N >> M;
        vector<vector<int>> v(N, vector<int>(M));
        for (int i = 0; i < N; i++)
            for (int j = 0; j < M; j++) cin >> v[i][j];
        Solution ob;
        cout << ob.maximumSumRectangle(N, M, v) << "\n";
    }
}
// } Driver Code Ends
