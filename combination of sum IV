/*

Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.
Example 2:

Input: nums = [9], target = 3
Output: 0
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 1000
All the elements of nums are unique.
1 <= target <= 1000
 
 */
 
 
 class Solution {
public:

    int solve(int tar,vector<int>& nums,vector<int> &dp)
    {
        if(tar == 0)
        return 1;

        if(dp[tar]!= -1)
        return dp[tar];

        int ans=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i] <= tar)
            {
                ans += solve(tar-nums[i],nums,dp);
            }
        }

        return dp[tar] = ans;
        
    }

    int combinationSum4(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int n= nums.size();
        vector<int> dp(target+1,-1);

        return solve(target,nums,dp);
    }
};
