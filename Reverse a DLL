Problem Statement

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
8
1 2 3 4 5 6 7 8 
Sample Output 1 :
8 7 6 5 4 3 2 1
Explanation For Sample Output 1
Input: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6 <-> 7 <-> 8
Output: 8 <-> 7 <-> 6 <-> 5 <-> 4 <-> 3 <-> 2 <-> 1
Explanation: It's self explanatory.
Sample Input 2 :
5
5 8 4 9 1
Sample Output 2 :
1 9 4 8 5
Constraints :
1 <= 'N' <= 10^3
0 <= 'data' <= 10^3 

Where 'N' is the size of the doubly linked list.

Time Limit: 1 sec






/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next,*prev;
    Node()
    {
        this->data = 0;
        next = NULL;
        prev= NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
        this->prev= NULL;
    }
    Node(int data, Node* next, Node *prev)
    {
        this->data = data;
        this->next = next;
        this->prev= prev;
    }
};

*/

Node* reverseDLL(Node* head)
{   
    // Write your code here  
    // Node * res = new Node(-1);
    // Node * ans = res;

    if(head == NULL)
    return NULL;

    Node *curr = head;
    Node * before;
    Node * frw ;

    while(curr != NULL)
    {
        frw = curr->next;
        curr->next = curr->prev;
        curr->prev = frw;
        before = curr;
        curr = curr->prev;
    }

    return before;


}

