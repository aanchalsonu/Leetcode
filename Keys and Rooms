/*

There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot 
enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of 
them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, 
or false otherwise.

 

Example 1:

Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.
Example 2:

Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.
 

Constraints:

n == rooms.length
2 <= n <= 1000
0 <= rooms[i].length <= 1000
1 <= sum(rooms[i].length) <= 3000
0 <= rooms[i][j] < n
All the values of rooms[i] are unique.


*/


class Solution {
public:
    void dfs(int node,vector<vector<int>>& rooms,vector<int>&vis)
    {
        vis[node]=1;// Mark Visited to tell that room is unlocked by key
        for(auto it:rooms[node]) // To unlock whose keys are in current room
        {
            if(vis[it]!=1) 
            {
                dfs(it,rooms,vis);//If Room not visited/unlocked earlier then visit the room and unlock it.
            }
        }
    }
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        vector<int>vis(rooms.size(),0);//To mark unlocked rooms
        int start=0;//To pass the key for first room
        dfs(start,rooms,vis);// Function to traverse through all rooms and unlock the locked ones if their keys found.
        for(int i=0;i<rooms.size();i++)
        {
            if(vis[i]==0)return false;//If Room is not unlocked yet then return false;
        }
        return true;//All rooms are visited and unlocked
    }


















        // map<int,int> mp;
        // int i,j;
        // int n = rooms[0].size();
        // for(i=0;i<n;i++)
        // {
        //     vector<int> t;
        //     for(j=0;j<rooms[i].size();j++)
        //     {
        //         t.push_back(rooms[i][j]);
        //         mp[rooms[i][j]]++;
        //     }
        //     if(mp.find(rooms[i]) == 0)
        //     return false;
        // }
        // return true
};
