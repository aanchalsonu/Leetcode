/*
Given an array of n distinct integers. The task is to check whether reversing any one sub-array
  can make the array sorted or not. If the array is already sorted or can be made sorted by reversing any one subarray, print “Yes“, else print “No“.

Examples: 

Input : arr [] = {1, 2, 5, 4, 3}
Output : Yes
By reversing the subarray {5, 4, 3}, the array will be sorted.

Input : arr [] = { 1, 2, 4, 5, 3 }
Output : No


The idea is to compare the given array with its sorted version. Make a copy of the given array and sort it. 
Now, find the first index and last index in the given array which does not match with the sorted array. If no
such indices are found (given array was already sorted), return True. Else check if the elements between the found 
indices are in decreasing order, if Yes then return True else return False

 Below is the implementation of the above approach:

*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
    vector<int> v;
    int n,i,x;
    cout<<"N value\n";
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>x;
        v.push_back(x);                      
    }
    
    vector<int> temp;
    for(int j : v)
    {
        temp.push_back(j);
    }
    sort(temp.begin(),temp.end());
    
    int front=0,back=n-1;
    for(;front < n;front++)
    {
        if(temp[front]!=v[front])
        break;
    }
    
    for(;back>0;back--)
    {
        if(temp[back]!=v[back])
        break;
    }
    
    if(front>=back)
    {
        cout<<"yes\n";
        exit(0);
    }
    
    do{
        front++;
        if(v[front-1]<v[front])
        {
            cout<<"No\n";
            return 0;
        }
    }while(front != back);
    
    cout<<"Yes\n";
    return 0;
}
