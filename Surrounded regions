Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
Example 2:

Input: board = [["X"]]
Output: [["X"]]


class Solution {
public:
    void dfs(vector<vector<char>> &mat, vector<vector<int>> &vis, int i, int j) {
        int row = mat.size();
        int coloumn = mat[0].size();
        if (i < 0 || i >= row || j < 0 || j >= coloumn || mat[i][j] == 'X' || vis[i][j]) {
            return;
        }
        vis[i][j] = 1;
        dfs(mat, vis, i + 1, j);
        dfs(mat, vis, i, j + 1);
        dfs(mat, vis, i - 1, j);
        dfs(mat, vis, i, j - 1);
    }
    void solve(vector<vector<char>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));

        for (int i = 0; i < m; ++i) {
            if (!vis[0][i] && mat[0][i] == 'O') {
                dfs(mat, vis, 0, i);
            }
            if (!vis[n - 1][i] && mat[n - 1][i] == 'O') {
                dfs(mat, vis, n - 1, i);
            }
        }

        for (int i = 0; i < n; ++i) {
            if (!vis[i][0] && mat[i][0] == 'O') {
                dfs(mat, vis, i, 0);
            }
            if (!vis[i][m - 1] && mat[i][m - 1] == 'O') {
                dfs(mat, vis, i, m - 1);
            }
        }

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (!vis[i][j] && mat[i][j] == 'O') {
                    mat[i][j] = 'X';
                }
            }
        }
    }
};
