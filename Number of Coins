Given a value V and array coins[] of size M, the task is to make the change for V cents, 
given that you have an infinite supply of each of coins{coins1, coins2, ..., coinsm} valued coins. 
Find the minimum number of coins to make the change. If not possible to make change then return -1.


Example 1:

Input: V = 30, M = 3, coins[] = {25, 10, 5}
Output: 2
Explanation: Use one 25 cent coin
and one 5 cent coin
Example 2:
Input: V = 11, M = 4,coins[] = {9, 6, 5, 1} 
Output: 2 
Explanation: Use one 6 cent coin
and one 5 cent coin



//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{

	public:
	
	int solve(int sum, int i,int coins[], int M ,vector<vector<int>> &dp)
	{
	    if(sum<0 || i == M)
	    return 1e8;
	    
	    if(sum == 0)
	    return 0;
	    
	    if(dp[i][sum] != -1)
	    return dp[i][sum];
	    
	    int pick = solve(sum-coins[i],i,coins,M,dp)+1;
	    int notpick = solve(sum,i+1,coins,M,dp);
	    
	    return dp[i][sum] = min(pick,notpick);
	}
	
	
	
	int minCoins(int coins[], int M, int V) 
	{ 
	    // Your code goes here
	    
	    vector<vector<int>> dp(M+1,vector<int>(V+1,-1));
	    if(solve(V,0,coins,M,dp) >= 1e8)
	    return -1;
	    else
	    return solve(V,0,coins,M,dp);
	} 
	  
};

//{ Driver Code Starts.
int main() 
{
   
   
   	int t;
    cin >> t;
    while (t--)
    {
        int v, m;
        cin >> v >> m;

        int coins[m];
        for(int i = 0; i < m; i++)
        	cin >> coins[i];

      
	    Solution ob;
	    cout << ob.minCoins(coins, m, v) << "\n";
	     
    }
    return 0;
}

// } Driver Code Ends
