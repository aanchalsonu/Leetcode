/*

Given a square maze containing positive numbers, find all paths from a corner cell (any of the extreme four corners) to the middle cell. 
We can move exactly n steps from a cell in 4 directions i.e. North, East, West and South where n is value of the cell, 

We can move to mat[i+n][j], mat[i-n][j], mat[i][j+n], and mat[i][j-n] from a cell mat[i][j] where n is value of mat[i][j].

Example

Input:  9 x 9 maze
[ 3, 5, 4, 4, 7, 3, 4, 6, 3 ]
[ 6, 7, 5, 6, 6, 2, 6, 6, 2 ]
[ 3, 3, 4, 3, 2, 5, 4, 7, 2 ]
[ 6, 5, 5, 1, 2, 3, 6, 5, 6 ]
[ 3, 3, 4, 3, 0, 1, 4, 3, 4 ]
[ 3, 5, 4, 3, 2, 2, 3, 3, 5 ]
[ 3, 5, 4, 3, 2, 6, 4, 4, 3 ]
[ 3, 5, 1, 3, 7, 5, 3, 6, 4 ]
[ 6, 2, 4, 3, 4, 5, 4, 5, 1 ]

Output:
(0, 0) -> (0, 3) -> (0, 7) -> 
(6, 7) -> (6, 3) -> (3, 3) -> 
(3, 4) -> (5, 4) -> (5, 2) -> 
(1, 2) -> (1, 7) -> (7, 7) ->
(7, 1) -> (2, 1) -> (2, 4) -> 
(4, 4) -> MID

*/

#include <bits/stdc++.h>
using namespace std;

#define n 9

void maze(int a[n][n], int i, int j)
{
  cout << "(" << i << ", " << j << ") -> ";

  int m = n / 2;
  int x = a[i][j];

  if (i < 0 || j < 0 || i > n || j > n)  
    return;

  if (i == m && j == m)
  {
    cout << "MID" << endl;
    return;
  }

  if (i < m && j < m)
    return maze(a, i, j + x);

  else if (i < m && j >= m)
    return maze(a, i + x, j);

  else if (i >= m && j >= m)
    return maze(a, i, j - x);

  else if (i >= m && j < m)
    return maze(a, i - x, j);
}

int main()
{
  int a[n][n] =
      {
          {3, 5, 4, 4, 7, 3, 4, 6, 3},
          {6, 7, 5, 6, 6, 2, 6, 6, 2},
          {3, 3, 4, 3, 2, 5, 4, 7, 2},
          {6, 5, 5, 1, 2, 3, 6, 5, 6},
          {3, 3, 4, 3, 0, 1, 4, 3, 4},
          {3, 5, 4, 3, 2, 2, 3, 3, 5},
          {3, 5, 4, 3, 2, 6, 4, 4, 3},
          {3, 5, 1, 3, 7, 5, 3, 6, 4},
          {6, 2, 4, 3, 4, 5, 4, 5, 1}};

  maze(a, 0, 0);

  return 0;
}
