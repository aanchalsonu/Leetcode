Problem statement





Sample Input 1 :
5
1 2 3 4 5 -1 -1 -1 -1 -1 -1
Sample Output 1 :
1 2 4
1 2 5 
1 3
Explanation for Sample Input 1:

All the root to leaf paths are :
1 2 4
1 2 5 
1 3
Sample Input 2 :
7
1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1
Sample Output 2 :
1 3 5
1 3 6
1 2 4 7
Constraints :
1 <= N <= 3*10^3

Time Limit : 1 sec



/********************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode {
        public :
        int data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };
    
********************************************************************/

void solve(BinaryTreeNode<int> * root, vector<string> &res, string s)
{
    if(!root)
    return ;

    if(!root->left && !root->right)
    {
        s += to_string(root->data);
        res.push_back(s);
        return;
    }

    s += to_string(root->data)+ " ";
    solve(root->left,res,s);
    solve(root->right,res,s);
}


vector <string> allRootToLeaf(BinaryTreeNode<int> * root) {
    // Write your code here.

    vector<string> res;

    if(!root)
    return res;

    solve(root,res, "");
    return res;
}
