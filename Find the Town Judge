/*

In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. 
If a trust relationship does not exist in trust array, then such a trust relationship does not exist.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

 

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1

*/

class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        int ans=0,i;
        if (trust.size() == 0 && n == 1) 
            return 1;
        vector<int> count(n+1);

        for(auto itr : trust)
        {
            //decrease the count of first person and increase the count of second person so that the trust can be found if the count[i] is equal to n-1 that means that particular person is a judge
            count[itr[0]]--;
            count[itr[1]]++;
        }

        for(i=0;i<count.size();i++)
        {
            if(count[i] == n-1)
            return i;
        }
        return -1;
        // ans = trust[0][1];
        // for(i=1;i<n;i++)
        // {
        //     if(trust[i][1] != ans)
        //     {
        //         return -1;
        //     }
        // }
        // return ans;
    }
};
