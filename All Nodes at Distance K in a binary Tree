Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values 
of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
Example 2:

Input: root = [1], target = 1, k = 3
Output: []
 

Constraints:

The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000









/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void findparent(TreeNode * root, unordered_map<TreeNode *,TreeNode *> &mp)
    {
        queue<TreeNode *> q;

        q.push(root);
        while(!q.empty())
        {
            TreeNode * temp = q.front();
            q.pop();

            if(temp->left)
            {
                mp[temp->left] = temp;
                q.push(temp->left);
            }
            if(temp->right)
            {
                mp[temp->right] = temp;
                q.push(temp->right);
            }

        }
    }


    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        //first find the parent of each

        unordered_map<TreeNode *, TreeNode*> mp;
        findparent(root,mp);

        unordered_map<TreeNode *,bool> vis;
        queue<TreeNode *> que;
        que.push(target);
        vis[target] = true;

        int n = 0;
        while(!que.empty())
        {
            int size = que.size();
            if(n++ == k)break;
            for(int i=0;i<size;i++)
            {
                TreeNode * curr = que.front();
                que.pop();
                if(curr->left && ! vis[curr->left])
                {
                    que.push(curr->left);
                    vis[curr->left] = true;
                }
                if(curr->right && !vis[curr->right])
                {
                    que.push(curr->right);
                    vis[curr->right] = true;
                }
                if(mp[curr] && ! vis[mp[curr]] )
                {
                    que.push(mp[curr]);
                    vis[mp[curr]] = true;
                }
            }
        }

        vector<int> res;
        while(!que.empty())
        {
            res.push_back(que.front()->val);
            que.pop();
        }
        return res;

    }
};
