/*

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:


Input: n = 3

Output: [[1,2,3],[8,9,4],[7,6,5]]
Example 2:

Input: n = 1
Output: [[1]]

*/


class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        int i=0,j=0;
        int curr=1,top=0,btm=n-1,left=0,right = n-1;
        vector<vector<int>> ans(n,vector<int>(n));

        while(curr <= (n*n))
        {
            // left->right
            while(curr <= (n*n) && j <= right)
            {
                ans[i][j++] = curr++;
            }
            j--;
            i++;
            top++;


            //top->bottom
            while(curr <= (n*n) &&  i <= btm )
            {
                ans[i++][j] = curr++;
            }
            i--;
            j--;
            right--;

            // right->left
            while(curr <= (n*n) && j>=left)
            {
                ans[i][j--] = curr++;
            }
            i--;
            j++;
            btm--;

            //bottom->top
            while(curr <= (n*n) && i>=top )
            {
                ans[i--][j] = curr++;
            }
            j++;
            i++;
            left++;

        }
        return ans;

    }
};
