/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
*/

class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<Character>();
        for(char c : s.toCharArray())
        {
            if(c == '(')
                st.push(')');
            else if(c == '[')
                st.push(']');
            else if(c == '{')
                st.push('}');
            else if(st.isEmpty() || st.pop() != c)
                return false;
        }
        return st.isEmpty();
               
        
        // int i,j,n;
        // n = s.length();
        // char arr[] = new char[n];
        // j=0;
        // for(i=0;i<n;i++)
        // {
        //     if(s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{')
        //     {
        //         arr[j++] = s.charAt(i);
        //     }
        //     else 
        //     {
        //         while(s.charAt(i) == ')' || s.charAt(i) == ']' || s.charAt(i) == '}')
        //         {
        //             j--;
        //             i--;
        //         }
        //     }
        // }
        // if(j==0)
        //     return true;
        // else
        //     return false;
    }
}
