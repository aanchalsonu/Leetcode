Problem statement
You have been given an undirected, connected graph of ‘V’ vertices (labelled from 0 to V-1) and ‘E’ edges. Each edge connecting two nodes 'u' and 'v' has a weight denoting the distance between them.



Your task is to find the shortest path distance from the source node 'S' to all the vertices. You have to return a list of integers denoting the shortest distance between each vertex and source vertex 'S'.



Note:

1. There are no self-loops(an edge connecting the vertex to itself) in the given graph.

2. There are no parallel edges i.e no two vertices are directly connected by more than 1 edge.


For Example:

Input:
4 5
0 1 5
0 2 8
1 2 9
1 3 2
2 3 6

The source node is node 0.

The shortest distance from node 0 to node 0 is 0.

The shortest distance from node 0 to node 1 is 5. In the above figure, the green path represents this distance. The path goes from node 0->1, giving distance = 5.

The shortest distance from node 0 to node 2 is 8. In the above figure, the pink path represents this distance. The path goes from node 0->2, giving distance = 8.

The shortest distance from node 0 to node 3 is 7. In the above figure, the yellow path represents this distance. The path goes from node 0->1->3, giving distance = 7.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1
5 7 0
0 1 7
0 2 1
0 3 2
1 2 3
1 3 5 
1 4 1
3 4 7
Sample Output 1
0 4 1 2 5
Explanation of sample input 1

The source node is node 0.

The shortest distance from node 0 to node 0 is 0.

The shortest distance from node 0 to node 1 is 4. In the above figure, the green path represents this distance. The path goes from node 0->2->1, giving distance = 1+3 = 4.

The shortest distance from node 0 to node 2 is 1. In the above figure, the red path represents this distance. The path goes from node 0->2, giving distance = 1

The shortest distance from node 0 to node 3 is 2. In the above figure, the pink path represents this distance. The path goes from node 0->3, giving distance = 2.

The shortest distance from node 0 to node 4 is 5. In the above figure, the yellow path represents this distance. The path goes from node 0->2->1->4, giving distance = 1+3+1 = 5.
Sample Input 2:
3 3 2
1 0 9
2 1 8
0 2 4
Sample Output 2:
4 8 0 
Constraints:
1 <= 'V' <= 10^5
1 <= 'E' <= 10^5
1 <= distance between vertices <= 10^5

vector<int> dijkstra(vector<vector<int>> &edge, int vertices, int edges, int source) {

    // 'edge' contains {u, v, distance} vectors.

    vector<vector<pair<int, int>>> adj(vertices); // Correct initialization of 'adj'

 

    for (int i = 0; i < edges; i++) {

        int u = edge[i][0];

        int v = edge[i][1];

        int wt = edge[i][2];

 

        adj[u].push_back({v, wt});

        adj[v].push_back({u, wt});

    }

 

    vector<int> dis(vertices, INT_MAX);

    dis[source] = 0;

 

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    pq.push({0, source});


 

    while (!pq.empty()) {

        

        int node = pq.top().second;

        int dist = pq.top().first;

        pq.pop();

 

        for (auto it : adj[node]) {

            int v = it.first;

            int wt = it.second;

            if (dis[node] + wt < dis[v]) {

                dis[v] = dis[node] + wt;

                pq.push({dis[v], v});

            }

        }

    }

    return dis;

}
