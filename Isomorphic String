/*

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters 
may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

*/


class Solution {
public:
    bool isIsomorphic(string s, string t) {


        map<char,char> map;
        set<char> set;
        int n = s.size()-1;
        while(n>=0){
            if(map.count(s[n]) && map[s[n]] != t[n]){
                return false;
            }
            if( !map.count(s[n]) && set.count(t[n])){
                return false;
            }
            set.insert(t[n]);
            map[s[n]]=t[n];
            n--;
        }
        return true;













        // unordered_map<char,int>mp1;
        // unordered_map<char,int> mp2;

        // for(int k=0;k<s.length();k++)
        // {
        //     mp1[s[k]]++;
        // }


        // for(int k=0;k<t.length();k++)
        // {
        //     mp2[t[k]]++;
        // }



        // for(int i= 0,j=0 ;i<mp1.size() && j<mp2.size();i++,j++)
        // {
        //     if(mp1[s[i]] != mp2[t[i]])
        //     {
        //         return false;
        //     }
        // } 

        // return true;
    }

};
