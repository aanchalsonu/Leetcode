Problem Statement




Sample Input 1:
8 3
1 3 6 5 8 9 13 4
0 1 5
Sample Output 1:
7 6 1
Explanation Of Sample Input 1:
For test case one:
Input:
arr = [1, 3, 6, 5, 8, 9, 13, 4], N=8, Q=3, query = [0, 1, 5]
Output:
7 6 1

Explanation: The element at index 0 is 1 for the first query. There are seven elements greater than 1 towards the right, i.e., 3, 6, 5, 8, 9, 13, and 4.

For the second query, the element at index 1 is 3. There are six elements greater than 3 towards the right, i.e., 6, 5, 8, 9, 13, and 4. 

For the third query, the element at index 5 is 9. There is only one element greater than 9 towards the right, i.e., 13. 

Hence we return [7, 6, 1].
Sample Input 2:
4 4
1 2 3 4
0 1 2 3
Sample Output 2:
3 2 1 0
Constraints:
1 <= N <= 10^4
1 <= Q <= 100
1 <= arr[i] <= 10^5.
0 <= query[i] <= ‘N’-1
Time Limit: 1 sec


vector<int> countGreater(vector<int>&arr, vector<int>&query) {
    // Write your code here.
    int n = query.size();
    int m = arr.size();
    vector<int> ans(n,-1);
    for(int i=0;i<n;i++)
    {
        int j = query[i];
        int pivot = arr[j];
        j = j+1;
        int cnt=0;
        while(j<m)
        {
            if(pivot<arr[j])
            cnt++;
            j++;
        }
        ans[i] = cnt;
    }
    return ans;
}
